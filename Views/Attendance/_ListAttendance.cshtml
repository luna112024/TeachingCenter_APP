@using hongWenAPP.Models.AttendanceModel.DTOs
@model PageList<GetAttendanceDTO>

@{
    GetAttendanceDTO p = null;
}
<style>
    .bg-label-success {
        background-color: #e8fadf !important;
        color: #71dd37 !important;
        font-size: 11px;
        font-weight: 600;
    }

    .bg-label-secondary {
        background-color: #e4e6e8 !important;
        color: #8592a3;
        font-size: 11px;
        font-weight: 600;
    }

    .bg-label-warning {
        background-color: #fff3cd !important;
        color: #856404;
        font-size: 11px;
        font-weight: 600;
    }

    .bg-label-primary {
        background-color: #e7f3ff !important;
        color: #696cff;
        font-size: 11px;
        font-weight: 600;
    }

    .bg-label-danger {
        background-color: #f8d7da !important;
        color: #721c24;
        font-size: 11px;
        font-weight: 600;
    }

    .bg-label-info {
        background-color: #d1ecf1 !important;
        color: #0c5460;
        font-size: 11px;
        font-weight: 600;
    }
</style>
<table class="table">
    <thead>
        <tr>
            <th class="mcol-50">N<sup>o</sup></th>
            <th>Student</th>
            <th>Section</th>
            <th>Course</th>
            <th>Class Date</th>
            <th>Status</th>
            <th>Check In</th>
            <th>Check Out</th>
            <th>Minutes Late</th>
            <th>Participation</th>
            <th class="text-end mcol-200">Actions</th>
        </tr>
    </thead>
    <tbody class="table-border-bottom-0">
        @{
            var i = Model.Paging.StartRowNo;
        }
        @foreach (var m in Model)
        {
        <tr>
            <td>@i</td>
            <td>
                <div class="d-flex flex-column">
                    <h6 class="mb-0">@m.StudentName</h6>
                    <small class="text-muted">@m.StudentCode</small>
                </div>
            </td>
            <td>
                <div class="d-flex flex-column">
                    <span class="fw-semibold">@m.SectionName</span>
                    <small class="text-muted">@m.SectionCode</small>
                </div>
            </td>
            <td>@m.CourseName</td>
            <td>@m.ClassDate.ToString("MMM dd, yyyy")</td>
            <td>
                @switch (m.Status?.ToLower())
                {
                    case "present":
                        <span class="badge bg-label-success text-capitalized">Present</span>
                        break;
                    case "absent":
                        <span class="badge bg-label-danger text-capitalized">Absent</span>
                        break;
                    case "late":
                        <span class="badge bg-label-warning text-capitalized">Late</span>
                        break;
                    case "excused":
                        <span class="badge bg-label-info text-capitalized">Excused</span>
                        break;
                    case "sick":
                        <span class="badge bg-label-secondary text-capitalized">Sick</span>
                        break;
                    case "emergency":
                        <span class="badge bg-label-primary text-capitalized">Emergency</span>
                        break;
                    default:
                        <span class="badge bg-label-secondary text-capitalized">@m.Status</span>
                        break;
                }
            </td>
            <td>
                @if (m.CheckInTime.HasValue)
                {
                    @m.CheckInTime.Value.ToString(@"hh\:mm")
                }
                else
                {
                    <span class="text-muted">-</span>
                }
            </td>
            <td>
                @if (m.CheckOutTime.HasValue)
                {
                    @m.CheckOutTime.Value.ToString(@"hh\:mm")
                }
                else
                {
                    <span class="text-muted">-</span>
                }
            </td>
            <td>
                @if (m.MinutesLate > 0)
                {
                    <span class="text-warning">@m.MinutesLate min</span>
                }
                else
                {
                    <span class="text-muted">-</span>
                }
            </td>
            <td>
                <div class="d-flex align-items-center">
                    @{
                        int displayStars = m.ParticipationScore;
                        
                        // Auto-adjust stars based on status
                        switch (m.Status?.ToLower())
                        {
                            case "absent":
                                displayStars = 0; // Absent = 0 stars
                                break;
                            case "late":
                                // Late students get reduced stars based on minutes
                                if (m.MinutesLate >= 30)
                                    displayStars = 2; // 30+ minutes late = 2 stars
                                else if (m.MinutesLate >= 15)
                                    displayStars = 3; // 15-29 minutes late = 3 stars
                                else if (m.MinutesLate > 0)
                                    displayStars = 4; // Less than 15 min = 4 stars
                                else
                                    displayStars = 3; // Late but no minutes recorded = 3 stars (default penalty)
                                break;
                            case "excused":
                                displayStars = 5; // Excused = full 5 stars
                                break;
                            case "sick":
                                displayStars = 4; // Sick = 4 stars
                                break;
                            case "emergency":
                                displayStars = 5; // Emergency = full 5 stars
                                break;
                            case "present":
                            default:
                                displayStars = m.ParticipationScore; // Present = original score
                                break;
                        }
                    }
                    
                    @for (int j = 1; j <= 5; j++)
                    {
                        <i class="bx @(j <= displayStars ? "bxs-star text-warning" : "bx-star text-muted") me-1"></i>
                    }
                </div>
            </td>
            <td class="text-end">
                <div class="dropdown">
                    <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                        <i class="bx bx-dots-vertical-rounded"></i>
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" modal-popup="" modal-size="lg" asp-action="DetailsAttendance" asp-controller="Attendance" asp-route-id="@m.AttendanceId"><i class="bx bx-show me-1"></i> View</a>
                        <a class="dropdown-item" modal-popup="" modal-size="lg" asp-action="EditAttendance" asp-controller="Attendance" asp-route-id="@m.AttendanceId"><i class="bx bx-edit-alt me-1"></i> Edit</a>
                        @if (m.MakeupRequired)
                        {
                            <a class="dropdown-item" modal-popup="" modal-size="md" asp-action="ScheduleMakeupClass" asp-controller="Attendance" asp-route-attendanceId="@m.AttendanceId"><i class="bx bx-calendar-plus me-1"></i> Schedule Makeup</a>
                        }
                        <a class="dropdown-item text-danger" modal-popup="" asp-action="DeleteAttendance" asp-controller="Attendance" asp-route-id="@m.AttendanceId"><i class="bx bx-trash me-1"></i> Delete</a>
                    </div>
                </div>
            </td>
        </tr>
        i++;
        }

    </tbody>
</table>
@await Html.PartialAsync("_pageList", Model.Paging)