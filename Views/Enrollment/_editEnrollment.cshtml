@model UpdateEnrollmentDTO

<form asp-action="EditEnrollment" asp-controller="Enrollment" method="post" autocomplete="off">
    <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Edit Enrollment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
        <input asp-for="EnrollmentId" type="hidden" />
        <div class="row g-3">
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="StudentId">Student<span class="text-danger">*</span></label>
                <div class="searchable-select dropdown w-100"
                     data-name="StudentId"
                     data-selected-value="@(Model?.StudentId ?? Guid.Empty)"
                     data-url="@Url.Action("GetAllStudents", "Student")">
                    <button class="form-select w-100 text-start d-flex justify-content-between align-items-center"
                        type="button"
                        id="dropdownSearchButton"
                        data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <span class="text-secondary selected-student">
                        Select a Student
                    </span>
                        <i class="bx bx-chevron-down ms-2 text-secondary"></i>
                    </button>
                    <ul class="dropdown-menu py-2 px-1"
                        aria-labelledby="dropdownSearchButton">
                        <div class="px-2">
                            <input type="text"
                                   class="form-control form-control-sm mb-2 dropdown-search-input"
                                   id="dropdownSearchInput"
                                   placeholder="Search Student.."
                                   autocomplete="off" />
                        </div>
                        <li><span class="dropdown-item text-muted small"><i class="bx bx-loader bx-spin"></i> Loading...</span></li>
                    </ul>
                </div>
            </div>
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="SectionId">Class Section<span class="text-danger">*</span></label>
                <div class="searchable-select dropdown w-100"
                     data-name="SectionId"
                     data-selected-value="@(Model?.SectionId ?? Guid.Empty)"
                     data-url="@Url.Action("GetAllClassSections", "ClassSection")">
                    <button class="form-select w-100 text-start d-flex justify-content-between align-items-center"
                        type="button"
                        id="dropdownSearchButton2"
                        data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <span class="text-secondary selected-section">
                        Select a Section
                    </span>
                        <i class="bx bx-chevron-down ms-2 text-secondary"></i>
                    </button>
                    <ul class="dropdown-menu py-2 px-1"
                        aria-labelledby="dropdownSearchButton2">
                        <div class="px-2">
                            <input type="text"
                                   class="form-control form-control-sm mb-2 dropdown-search-input"
                                   id="dropdownSearchInput2"
                                   placeholder="Search Section.."
                                   autocomplete="off" />
                        </div>
                        <li><span class="dropdown-item text-muted small"><i class="bx bx-loader bx-spin"></i> Loading...</span></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="EnrollmentDate">Enrollment Date<span class="text-danger">*</span></label>
                <input asp-for="EnrollmentDate" type="date" class="form-control" required />
                <span asp-validation-for="EnrollmentDate" class="text-danger"></span>
            </div>
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="EnrollmentType">Enrollment Type<span class="text-danger">*</span></label>
                <select asp-for="EnrollmentType" class="form-select" required>
                    <option value="Regular">Regular</option>
                    <option value="Trial">Trial</option>
                    <option value="Makeup">Makeup</option>
                    <option value="Transfer">Transfer</option>
                </select>
                <span asp-validation-for="EnrollmentType" class="text-danger"></span>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="Status">Status<span class="text-danger">*</span></label>
                <select asp-for="Status" class="form-select" required>
                    <option value="Enrolled">Enrolled</option>
                    <option value="Active">Active</option>
                    <option value="Completed">Completed</option>
                    <option value="Dropped">Dropped</option>
                    <option value="Failed">Failed</option>
                    <option value="Transferred">Transferred</option>
                </select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="StartDate">Start Date</label>
                <input asp-for="StartDate" type="date" class="form-control" id="startDateInput" readonly />
                <small class="form-text text-muted">Auto-populated from selected section's term start date</small>
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="CompletionDate">Completion Date</label>
                <input asp-for="CompletionDate" type="date" class="form-control" id="completionDateInput" readonly />
                <small class="form-text text-muted">Auto-populated from selected section's term end date</small>
                <span asp-validation-for="CompletionDate" class="text-danger"></span>
            </div>
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="FinalGrade">Final Grade</label>
                <input asp-for="FinalGrade" type="text" class="form-control" placeholder="e.g., A, B+, Pass" />
                <span asp-validation-for="FinalGrade" class="text-danger"></span>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="FinalScore">Final Score</label>
                <input asp-for="FinalScore" type="number" step="0.01" min="0" max="100" class="form-control" placeholder="0.00" />
                <span asp-validation-for="FinalScore" class="text-danger"></span>
            </div>
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="AttendanceRate">Attendance Rate (%)</label>
                <input asp-for="AttendanceRate" type="number" step="0.01" min="0" max="100" class="form-control" placeholder="0.00" />
                <span asp-validation-for="AttendanceRate" class="text-danger"></span>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="DiscountPercentage">Discount Percentage (%)</label>
                <input asp-for="DiscountPercentage" type="number" step="0.01" min="0" max="100" class="form-control" placeholder="0.00" />
                <span asp-validation-for="DiscountPercentage" class="text-danger"></span>
            </div>
            <div class="col-6 mb-2">
                <label class="form-label" asp-for="DiscountReason">Discount Reason</label>
                <input asp-for="DiscountReason" type="text" class="form-control" placeholder="e.g., Early bird, Family discount" />
                <span asp-validation-for="DiscountReason" class="text-danger"></span>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12 mb-2">
                <label class="form-label" asp-for="SpecialNeeds">Special Needs</label>
                <textarea asp-for="SpecialNeeds" class="form-control" rows="2" placeholder="Any special requirements or accommodations"></textarea>
                <span asp-validation-for="SpecialNeeds" class="text-danger"></span>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12 mb-2">
                <label class="form-label" asp-for="Notes">Notes</label>
                <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Additional notes or comments"></textarea>
                <span asp-validation-for="Notes" class="text-danger"></span>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bx bx-x-circle me-1"></i>Cancel</button>
        <button type="submit" class="btn btn-primary"><i class="bx bx-save me-1"></i>Update</button>
    </div>
</form>

<script>
$(function () {
    $('.searchable-select').each(function () {
        const $container = $(this);
        const $button = $container.find('button.form-select');
        const $dropdownMenu = $container.find('.dropdown-menu');
        const $searchInput = $container.find('.dropdown-search-input');
        const hiddenName = $container.data('name');
        let selectedValue = $container.data('selected-value') || '';
        const ajaxUrl = $container.data('url')?.trim() || null;

        let $hiddenInput = $container.find(`input[type="hidden"][name="${hiddenName}"]`);
        if (!$hiddenInput.length) {
            $hiddenInput = $('<input type="hidden">').attr('name', hiddenName);
            $container.append($hiddenInput);
        }
        $hiddenInput.val(selectedValue);

        function renderOptions(items) {
            $dropdownMenu.find('li').not(':first-child').remove();

            if (!Array.isArray(items)) {
                return $dropdownMenu.append('<li><a href="#" class="dropdown-item text-danger small">Invalid data format</a></li>');
            }

            if (items.length === 0) {
                return $dropdownMenu.append('<li><a href="#" class="dropdown-item text-muted small">No results found</a></li>');
            }

            items.forEach(item => {
                const isActive = (selectedValue.toString() === item.id.toString()) ? ' active' : '';
                const displayText = hiddenName === 'StudentId' ? 
                    `${item.text} (${item.studentCode})` : 
                    `${item.text} (${item.sectionCode})`;
                const $li = $(`
                    <li>
                        <a href="#" class="dropdown-item${isActive}" data-value="${item.id}" title="${item.text}">
                            ${displayText}
                        </a>
                    </li>
                `);
                $dropdownMenu.append($li);
                if (isActive) {
                    const selectedText = hiddenName === 'StudentId' ? 
                        $button.find('.selected-student').text(item.text).removeClass('text-secondary') :
                        $button.find('.selected-section').text(item.text).removeClass('text-secondary');
                }
            });
        }

        function fetchOptions(query = '') {
            if (!ajaxUrl) return;

            $dropdownMenu.find('li').not(':first-child').remove();
            $dropdownMenu.append('<li><span class="dropdown-item text-muted small"><i class="bx bx-loader bx-spin"></i> Loading...</span></li>');

            $.ajax({
                url: ajaxUrl,
                method: 'GET',
                data: { q: query },
                dataType: 'json'
            })
                .done(function (data) {
                    console.log('Dropdown data received:', data);
                    renderOptions(data);
                })
                .fail(function (xhr, status, error) {
                    console.error('Dropdown AJAX error:', { xhr, status, error, url: ajaxUrl });
                    $dropdownMenu.find('li').not(':first-child').remove();
                    $dropdownMenu.append('<li><a href="#" class="dropdown-item text-danger small">Error loading data. Check console.</a></li>');
                });
        }

        $searchInput.on('input', function () {
            const query = $(this).val().toLowerCase();
            if (ajaxUrl) {
                fetchOptions(query);
            } else {
                $dropdownMenu.find('li').not(':first-child').each(function () {
                    const text = $(this).find('.dropdown-item').text().toLowerCase();
                    $(this).toggle(text.includes(query));
                });
            }
        });

        $container.on('show.bs.dropdown', function () {
            $searchInput.val('').focus();
            if (ajaxUrl) {
                fetchOptions('');
            } else {
                $dropdownMenu.find('li').show();
            }
        });

        $dropdownMenu.on('click', '.dropdown-item', function (e) {
            e.preventDefault();
            const $item = $(this);
            const newValue = $item.data('value');
            const newText = $item.text();

            selectedValue = newValue;
            $hiddenInput.val(newValue);
            $container.data('selected-value', newValue);
            
            if (hiddenName === 'StudentId') {
                $button.find('.selected-student').text(newText).removeClass('text-secondary');
            } else {
                $button.find('.selected-section').text(newText).removeClass('text-secondary');
            }

            $dropdownMenu.find('.dropdown-item').removeClass('active');
            $item.addClass('active');

            const bsDropdown = bootstrap.Dropdown.getInstance($button[0]);
            if (bsDropdown) {
                bsDropdown.hide();
            }

            $container.trigger('itemSelected', { id: newValue, text: newText });

            // If a class section was selected, fetch its details and update enrollment date
            if (hiddenName === 'SectionId' && newValue) {
                updateEnrollmentDateFromSection(newValue);
            }
        });

        if (ajaxUrl) {
            fetchOptions('');
        }
    });

    // Initialize enrollment date validation if section is already selected
    $(document).ready(function() {
        const selectedSectionId = $('input[name="SectionId"]').val();
        if (selectedSectionId) {
            updateEnrollmentDateFromSection(selectedSectionId);
        }
    });

    // Function to update enrollment date based on selected class section
    function updateEnrollmentDateFromSection(sectionId) {
        $.ajax({
            url: '@Url.Action("GetClassSection", "ClassSection")',
            method: 'GET',
            data: { id: sectionId },
            dataType: 'json',
            success: function(section) {
                if (section) {
                    // Update enrollment date validation
                    if (section.termStartDate) {
                        const termStartDate = new Date(section.termStartDate);
                        const enrollmentDateInput = $('input[name="EnrollmentDate"]');
                        
                        // Set max date to term start date
                        const maxDate = termStartDate.toISOString().split('T')[0];
                        enrollmentDateInput.attr('max', maxDate);
                        
                        // If current enrollment date is after term start, show warning
                        const currentDate = new Date(enrollmentDateInput.val());
                        if (currentDate > termStartDate) {
                            showEnrollmentDateWarning(termStartDate);
                        } else {
                            showEnrollmentDateInfo(termStartDate);
                        }
                    }
                    
                    // Auto-populate start and completion dates from term dates
                    if (section.termStartDate) {
                        const startDate = new Date(section.termStartDate);
                        const startDateInput = $('#startDateInput');
                        startDateInput.val(startDate.toISOString().split('T')[0]);
                        
                        // Update the hidden input value for form submission
                        $('input[name="StartDate"]').val(startDate.toISOString().split('T')[0]);
                    }
                    
                    if (section.termEndDate) {
                        const endDate = new Date(section.termEndDate);
                        const completionDateInput = $('#completionDateInput');
                        completionDateInput.val(endDate.toISOString().split('T')[0]);
                        
                        // Update the hidden input value for form submission
                        $('input[name="CompletionDate"]').val(endDate.toISOString().split('T')[0]);
                    }
                    
                    // Show info about auto-populated dates
                    showAutoPopulatedDatesInfo(section);
                }
            },
            error: function() {
                console.error('Failed to fetch class section details');
            }
        });
    }

    // Function to show enrollment date information
    function showEnrollmentDateInfo(termStartDate) {
        const infoHtml = `
            <div class="alert alert-info alert-dismissible fade show mt-2" role="alert">
                <i class="bx bx-info-circle me-2"></i>
                <strong>Enrollment Date Limit:</strong> 
                Enrollment date cannot be after the term start date (${termStartDate.toLocaleDateString()}).
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        // Remove existing alerts
        $('.alert-info, .alert-warning').remove();
        
        // Add new info alert after the enrollment date field
        $('input[name="EnrollmentDate"]').closest('.mb-2').after(infoHtml);
    }

    // Function to show enrollment date warning (for edit mode)
    function showEnrollmentDateWarning(termStartDate) {
        const warningHtml = `
            <div class="alert alert-warning alert-dismissible fade show mt-2" role="alert">
                <i class="bx bx-error-circle me-2"></i>
                <strong>Warning:</strong> 
                Current enrollment date is after the term start date (${termStartDate.toLocaleDateString()}). 
                Please update the enrollment date to be on or before the term start date.
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        // Remove existing alerts
        $('.alert-info, .alert-warning').remove();
        
        // Add new warning alert after the enrollment date field
        $('input[name="EnrollmentDate"]').closest('.mb-2').after(warningHtml);
    }

    // Function to show info about auto-populated dates
    function showAutoPopulatedDatesInfo(section) {
        const infoHtml = `
            <div class="alert alert-success alert-dismissible fade show mt-2" role="alert">
                <i class="bx bx-info-circle me-2"></i>
                <strong>Auto-populated Dates:</strong> 
                Start date and completion date have been automatically set based on the selected section's term dates.
                <br><small class="text-muted">
                    Term: ${section.termName} | 
                    Section: ${section.sectionName} (${section.sectionCode})
                </small>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        // Remove existing success alerts
        $('.alert-success').remove();
        
        // Add new info alert after the completion date field
        $('#completionDateInput').closest('.mb-2').after(infoHtml);
    }
});
</script>
