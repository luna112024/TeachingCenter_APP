@model PageList<GetUsersDTOs>

@{
    GetUsersDTOs p = null;
}

<style>
    :root{
        --bs-paper-bg: #fff;
        --bs-bg-label-tint-amount: 84%;
        --bs-primary: rgb(105, 108, 255);
        --bg-success: #71dd37;
    }
    @*Sovantha CSS here*@
    .bg-label-primary {
        background-color: color-mix(in sRGB, var(--bs-paper-bg) var(--bs-bg-label-tint-amount), var(--bs-primary)) !important;
        color: var(--bs-primary) !important;
    }

    .bg-label-success {
        background-color: #e8fadf !important;
        color: #71dd37 !important;
        font-size:11px;
        font-weight:600;
    }
    .bg-label-secondary{
        background-color: #e4e6e8 !important;
        color: #8592a3;
        font-size: 11px;
        font-weight: 600;
    }
    .avatar {
        --bs-avatar-size: 2.375rem;
        --bs-avatar-group-border: #fff;
        --bs-avatar-initial-inline: 3px;
        --bs-avatar-initial-bg: #eeedf0;
        position: relative;
        block-size: var(--bs-avatar-size);
        cursor: pointer;
        inline-size: var(--bs-avatar-size)
    }

    .avatar .avatar-initial {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--bs-avatar-initial-bg);
        color: var(--bs-white);
        font-size: 14px;
        font-weight: 600;
        inset: 0;
        text-transform: uppercase
    }

    .avatar.avatar-online::after, .avatar.avatar-offline::after, .avatar.avatar-away::after, .avatar.avatar-busy::after {
        position: absolute;
        border-radius: 100%;
        block-size: calc(var(--bs-avatar-size)*.2);
        box-shadow: 0 0 0 2px var(--bs-white);
        content: "";
        inline-size: calc(var(--bs-avatar-size)*.2);
        inset-block-end: 0;
        inset-inline-end: var(--bs-avatar-initial-inline)
    }

    .avatar img {
        block-size: 100%;
        inline-size: 100%
    }
    @*Sovantha CSS here*@
    /* Identity User List Table Enhancements */
    .identity-user-list-table {
        border-collapse: separate;
        border-spacing: 0;
    }

    .identity-user-list-table th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #e9ecef;
        padding: 0.75rem 0.75rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: #5a6c7d;
    }
    
    .identity-user-list-table td {
        padding: 0.75rem 0.75rem;
        border-bottom: 1px solid #e9ecef;
        vertical-align: middle;
    }
    .identity-user-text-avatar {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--bs-avatar-initial-bg);
        color: var(--bs-white);
        font-size: var(--bs-avatar-initial);
        font-weight: 500;
        inset: 0;
        text-transform: uppercase
    }
    
    .identity-user-text-avatar::before {
        content: '';
        position: absolute;
        top: 2px;
        left: 2px;
        right: 2px;
        bottom: 2px;
        border-radius: 50%;
        background: linear-gradient(135deg, rgba(255,255,255,0.4) 0%, rgba(255,255,255,0.1) 50%, transparent 100%);
        pointer-events: none;
    }

    /* Identity Avatar Color Classes (Sneat-style) */
    .identity-avatar-primary {
        background-color: color-mix(in sRGB, #fff 90%, #696cff) !important;
        color: #696cff !important;
    }
    
    .identity-avatar-secondary {
        background-color: color-mix(in sRGB, #fff 90%, #8592a3) !important;
        color: #8592a3 !important;
    }
    
    .identity-avatar-success {
        background-color: color-mix(in sRGB, #fff 90%, #71dd37) !important;
        color: #71dd37 !important;
    }
    
    .identity-avatar-info {
        background-color: color-mix(in sRGB, #fff 90%, #03c3ec) !important;
        color: #03c3ec !important;
    }
    
    .identity-avatar-warning {
        background-color: color-mix(in sRGB, #fff 90%, #ffab00) !important;
        color: #ffab00 !important;
    }
    
    .identity-avatar-danger {
        background-color: color-mix(in sRGB, #fff 90%, #ff3e1d) !important;
        color: #ff3e1d !important;
    }

    
    .identity-avatar-dark {
        background-color: color-mix(in sRGB, #fff 90%, #233446) !important;
        color: #233446 !important;
    }
    
    .identity-avatar-purple {
        background-color: color-mix(in sRGB, #fff 90%, #8b5cf6) !important;
        color: #8b5cf6 !important;
    }
    
    .identity-avatar-pink {
        background-color: color-mix(in sRGB, #fff 90%, #ec4899) !important;
        color: #ec4899 !important;
    }
    
    .identity-user-info-text {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        min-width: 0;
    }
    
    .identity-user-name {
        font-size: 0.9375rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
        line-height: 1.3;
    }
    
    .identity-user-email {
        font-size: 0.8125rem;
        color: #6c757d;
        margin: 0;
        word-break: break-word;
        line-height: 1.2;
    }
    
    /* Identity Role Badges */
    .identity-role-container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 0.375rem;
    }
    
    .identity-role-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.8125rem;
        font-weight: 500;
        line-height: 1.2;
        padding: 0.25rem 0;
    }
    
    .identity-role-separator {
        color: #dee2e6;
        font-weight: 300;
        font-size: 0.875rem;
    }
    
    /* Identity Status Badges */
    .identity-status-badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    /* Identity Actions Column */
    .identity-actions-cell {
        width: 120px;
        text-align: center;
    }
    
    .identity-actions-dropdown .dropdown-toggle {
        border: none;
        background: none;
        padding: 0.5rem;
        border-radius: 6px;
        transition: all 0.2s ease;
    }
    
    .identity-actions-dropdown .dropdown-toggle:hover {
        background-color: #e9ecef;
        color: #495057;
    }
    
    /* Identity Company Name */
    .identity-company-name {
        font-size: 0.875rem;
        color: #495057;
        font-weight: 500;
    }
    
    /* Identity Responsive Design */
    @@media (max-width: 768px) {
        .identity-user-list-table th,
        .identity-user-list-table td {
            padding: 0.75rem 0.5rem;
        }
        
        .identity-user-text-avatar {
            width: 32px;
            height: 32px;
            font-size: 10px;
        }
        
/*         .identity-user-avatar-container {
            gap: 0.625rem;
        } */
        
        .identity-user-name {
            font-size: 0.875rem;
        }
        
        .identity-user-email {
            font-size: 0.75rem;
        }
    }
</style>

<table class="table identity-user-list-table">
    <thead>
        <tr>
            <th class="mcol-50">N<sup>o</sup></th>
            <th>User</th>
            <th>Company</th>
            <th>Role</th>
            <th>Status</th>
            <th class="text-end mcol-200">Actions</th>
        </tr>
    </thead>
    <tbody class="table-border-bottom-0">
        @{
            var i = Model.Paging.StartRowNo;
        }
        @foreach (var m in Model)
        {
        <tr>
            <td>@i</td>
            <td class="identity-user-profile-cell">
                <div class="d-flex justify-content-left align-items-center">
                    <div class="avatar-wrapper">
                        <div class="avatar avatar-sm me-4">
                            @{
                            var initials = "";
                            var nameParts = m.Username.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                            if (nameParts.Length >= 2)
                            {
                            initials = nameParts[0].Substring(0, 1).ToUpper() + nameParts[1].Substring(0, 1).ToUpper();
                            }
                            else if (nameParts.Length == 1 && nameParts[0].Length >= 2)
                            {
                            initials = nameParts[0].Substring(0, 2).ToUpper();
                            }
                            else if (nameParts.Length == 1)
                            {
                            initials = nameParts[0].Substring(0, 1).ToUpper();
                            }

                            var colorClasses = new string[] {
                            "identity-avatar-primary",
                            "identity-avatar-secondary",
                            "identity-avatar-success",
                            "identity-avatar-info",
                            "identity-avatar-warning",
                            "identity-avatar-danger",
                            "identity-avatar-dark",
                            "identity-avatar-purple",
                            "identity-avatar-pink"
                            };
                                    var guidHash = m.UserId.GetHashCode();
                                    var colorClass = colorClasses[Math.Abs(guidHash) % colorClasses.Length];
                            }
                            <span class="avatar-initial rounded-circle @colorClass">@initials</span>
                        </div>
                    </div>
                    <div class="identity-user-info-text">
                        <h6 class="identity-user-name">@m.Username</h6>
                        <small class="identity-user-email">@m.Email</small>
                    </div>
                </div>
            </td>
            <td>
                <span class="identity-company-name">@m.CompanyName</span>
            </td>
            <td>
                @{
                    var roleConfig = new Dictionary<string, (string icon, string textColor)>
                    {
                        {"admin", ("bx-desktop", "text-primary")},
                        {"manager", ("bx-briefcase", "text-info")},
                        {"user", ("bx-user", "text-secondary")},
                        {"maintainer", ("bx-user", "text-primary")},
                        {"subscriber", ("bx-calendar", "text-warning")},
                        {"editor", ("bx-edit", "text-secondary")},
                        {"author", ("bx-pencil", "text-warning")}
                    };
                    var maxVisible = 3; // Show only first 3 roles, then "+X more"
                }
                <div class="identity-role-container">
                    @for(int roleIndex = 0; roleIndex < Math.Min(m.Roles.Count, maxVisible); roleIndex++)
                    {
                        var role = m.Roles[roleIndex];
                        var config = roleConfig.ContainsKey(role.ToLower()) ? 
                            roleConfig[role.ToLower()] : 
                            ("bx-user-circle", "text-secondary");
                        var icon = config.Item1;
                        var textColor = config.Item2;
                        <span class="identity-role-badge @textColor">
                            <i class="bx @icon"></i>@role
                        </span>
                        @if(roleIndex < Math.Min(m.Roles.Count, maxVisible) - 1)
                        {
                            <span class="identity-role-separator">|</span>
                        }
                    }
                    @if(m.Roles.Count > maxVisible)
                    {
                        <span class="identity-role-separator">|</span>
                        <span class="identity-role-badge text-muted" 
                                title="@string.Join(", ", m.Roles.Skip(maxVisible))"
                                data-bs-toggle="tooltip">
                            <i class="bx bx-plus"></i>+@(m.Roles.Count - maxVisible) more
                        </span>
                    }
                </div>
            </td>
                            <td>
                @if (m.Status)
                {
                        <span class="badge bg-label-success text-capitalized">Active</span>
                }
                else
                {
                        <span class="badge bg-label-secondary text-capitalized">Inactive</span>
                }
            </td>
        <td class="identity-actions-cell">
            <div class="dropdown identity-actions-dropdown">
                <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                    <i class="bx bx-dots-vertical-rounded"></i>
                </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" modal-popup=""  modal-size="xl" asp-action="EditUser" asp-controller="Identity" asp-route-id="@m.UserId"><i class="bx bx-edit-alt me-2"></i> Edit</a>
                        <a class="dropdown-item" modal-popup="" modal-size = "xl" asp-action="AssignRole" asp-controller="Identity" asp-route-id="@m.UserId"><i class="bx bx-check-shield me-2"></i>Assign Role</a>
                            <a class="dropdown-item" modal-popup="" modal-size="xl" asp-action="AssignCompany" asp-controller="Identity" asp-route-id="@m.UserId"><i class="bx bx-home-smile me-2"></i>Assign Company</a>
                        <a class="dropdown-item" modal-popup="" asp-action="ResetForcePassword" asp-controller="Identity" asp-route-id="@m.UserId"><i class="bx bx-refresh me-2"></i> Reset Password</a>
                        <a class="dropdown-item text-danger " modal-popup="" asp-action="DeleteUser" asp-controller="Identity" asp-route-id="@m.UserId"><i class="bx bx-user-x me-2"></i> Deactivate</a>
                    </div>
                </div>
            </td>
        </tr>
        i++;
        }
    </tbody>
</table>

@await Html.PartialAsync("_pageList", Model.Paging)