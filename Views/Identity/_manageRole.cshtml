@model hongWenAPP.Models.RolesModel.DTOs.ManageRolePermissionDTO
@using hongWenAPP.Models.RolesModel.DTOs

<form asp-action="AssignPermissions" asp-controller="Identity" method="post" autocomplete="off">
    <div class="modal-header">
        <span class="modal-title fs-md-5 fw-bold" id="staticBackdropLabel">Manage Role Permissions</span>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <!-- Role Selection -->
        <div class="row mb-3">
            <div class="col-12">
                @* <label for="roleSelect" class="form-label text-capitalize fw-medium">Select Role</label> *@
                @*  <select id="roleSelect" class="form-select form-select-sm" onchange="loadRolePermissions(this.value)">
                    <option value="">Choose a role...</option>
                    @if (ViewBag.Roles != null)
                    {
                        @foreach (var role in ViewBag.Roles as List<GetRoleDTO>)
                        {
                            <option value="@role.RoleId" selected="@(Model.RoleId == role.RoleId)">@role.RoleName</option>
                        }
                    }
                </select> *@
                <div class="searchable-select dropdown w-100 mb-3"
                     data-name="RoleId"
                     data-selected-value="@Model.RoleId"
                     data-url="">
                    <!-- empty data-url means static mode -->

                    <label class="form-label text-capitalize fw-medium">Select Role</label>

                    <button class="form-select form-select-sm w-100 text-start d-flex justify-content-between align-items-center"
                            type="button"
                            id="dropdownRoleButton"
                            data-bs-toggle="dropdown"
                            aria-expanded="false">
                        <span class="text-secondary selected-account">
                            @{
                                var selectedRole = Model.RoleId != Guid.Empty ? (ViewBag.Roles as List<GetRoleDTO>)?.FirstOrDefault(r => r.RoleId == Model.RoleId) : null;
                            }
                            @(selectedRole != null ? selectedRole.RoleName : "Choose a role...")
                        </span>
                        <i class="bx bx-chevron-down ms-2 text-secondary"></i>
                    </button>

                    <ul class="dropdown-menu py-2 px-1" aria-labelledby="dropdownRoleButton">
                        <div class="px-2">
                            <input type="text"
                                   class="form-control form-control-sm mb-2 dropdown-search-input"
                                   placeholder="Search Role..."
                                   autocomplete="off" />
                        </div>
                        @foreach (var role in ViewBag.Roles as List<GetRoleDTO>)
                        {
                            <li>
                                <a href="#" class="dropdown-item" data-value="@role.RoleId" title="@role.RoleName">@role.RoleName</a>
                            </li>
                        }
                    </ul>
                </div>

            </div>
        </div>

        <div id="permissionManagement" style="@(Model.RoleId != Guid.Empty ? "" : "display: none;")">
            <!-- Instructions Toggle -->
            <div class="mb-3">
                <button type="button" class="btn custom-outline-info btn-sm" onclick="toggleInstructions()" id="instructionsToggle">
                    <i class="bx bx-help-circle me-1"></i>
                    <span id="instructionsToggleText">Show Instructions</span>
                    <i class="bx bx-chevron-down ms-1" id="instructionsChevron"></i>
                </button>
            </div>

            <!-- Instructions (Hidden by default) -->
            <div class="alert alert-info" id="instructionsPanel" style="display: none;">
                <div class="d-flex align-items-start">
                    <i class="bx bx-info-circle me-2 mt-1"></i>
                    <div class="flex-grow-1">
                        <strong>How to use this interface:</strong>
                        <ul class="mb-0 mt-2">
                            <li><strong>Multi-select:</strong> Use <kbd>Ctrl+Click</kbd> or <kbd>Cmd+Click</kbd> to select multiple permissions</li>
                            <li><strong>Drag & Drop:</strong> Drag selected permissions between panels to assign/unassign</li>
                            <li><strong>Bulk actions:</strong> Use "Select All", "Clear", "Assign", and "Remove" buttons</li>
                            <li><strong>Search:</strong> Use the search boxes to filter permissions by name or description</li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Search boxes -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <input type="text" class="form-control form-control-sm" id="searchAvailable" placeholder="Search available permissions..." onkeyup="filterPermissions('available')">
                </div>
                <div class="col-md-6">
                    <input type="text" class="form-control form-control-sm" id="searchAssigned" placeholder="Search assigned permissions..." onkeyup="filterPermissions('assigned')">
                </div>
            </div>

            <div class="row">
                <!-- Available Permissions -->
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div class="lh-sm">
                                <h6 class="mb-0">Available Permissions</h6>
                                <small class="text-muted">Drag to assign</small>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="selectAllAvailable()">
                                    <i class="bx bx-check-square"></i> Select All
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearSelectionAvailable()">
                                    <i class="bx bx-square"></i> Clear
                                </button>
                                <button type="button" class="btn btn-sm btn-success" onclick="moveSelectedToAssigned()">
                                    <i class="bx bx-right-arrow-alt"></i> Assign
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-2">
                            <div class="permission-container available-permissions"
                                 id="availablePermissionsList"
                                 ondrop="drop(event, 'available')"
                                 ondragover="allowDrop(event)"
                                 style="min-height: 300px; max-height: 400px; overflow-y: auto; border: 2px dashed #e9ecef; border-radius: 8px; padding: 10px;">
                                @if (Model.AvailablePermissions?.Any() == true)
                                {
                                    @foreach (var permission in Model.AvailablePermissions)
                                    {
                                        <div class="permission-item lh-sm"
                                             data-permission-id="@permission.PermissionId"
                                             draggable="true"
                                             ondragstart="drag(event)"
                                             ondblclick="moveToAssigned(@permission.PermissionId)"
                                             onclick="toggleSelection(this, event)">
                                            <div class="d-flex align-items-center">
                                                <i class="bx bx-lock me-2 text-primary"></i>
                                                <div>
                                                    <div class="fw-medium">@permission.PermissionName</div>
                                                    @if (!string.IsNullOrEmpty(permission.Description))
                                                    {
                                                        <small class="text-muted">@permission.Description</small>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center text-muted py-4 empty-state-message">
                                        <i class="bx bx-check-circle display-4"></i>
                                        <p class="mt-2">All permissions are assigned</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-footer  bg-white d-flex justify-content-between align-items-center text-muted small py-2 px-3">
                            <div class="d-flex align-items-center gap-2">
                                <span class="fw-semibold">Available:</span>
                                <span id="availableCount" class="badge bg-label-info px-2 py-1" style="font-size: 0.75rem;">
                                    0
                                </span>
                            </div>
                        </div>

                    </div>
                </div>

                <!-- Assigned Permissions -->
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div class="lh-sm">
                                <h6 class="mb-0">Assigned Permissions</h6>
                                <small class="text-muted">Currently assigned to role</small>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="selectAllAssigned()">
                                    <i class="bx bx-check-square"></i> Select All
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearSelectionAssigned()">
                                    <i class="bx bx-square"></i> Clear
                                </button>
                                <button type="button" class="btn btn-sm btn-danger" onclick="moveSelectedToAvailable()">
                                    <i class="bx bx-left-arrow-alt"></i> Remove
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-2">
                            <div class="permission-container assigned-permissions"
                                 id="assignedPermissionsList"
                                 ondrop="drop(event, 'assigned')"
                                 ondragover="allowDrop(event)"
                                 style="min-height: 300px; max-height: 400px; overflow-y: auto; border: 2px dashed #e9ecef; border-radius: 8px; padding: 10px;">
                                @if (Model.AssignedPermissions?.Any() == true)
                                {
                                    @foreach (var permission in Model.AssignedPermissions)
                                    {
                                        <div class="permission-item lh-sm"
                                             data-permission-id="@permission.PermissionId"
                                             draggable="true"
                                             ondragstart="drag(event)"
                                             ondblclick="moveToAvailable(@permission.PermissionId)"
                                             onclick="toggleSelection(this, event)">
                                            <div class="d-flex align-items-center">
                                                <i class="bx bx-lock-open me-2 text-success"></i>
                                                <div>
                                                    <div class="fw-medium">@permission.PermissionName</div>
                                                    @if (!string.IsNullOrEmpty(permission.Description))
                                                    {
                                                        <small class="text-muted">@permission.Description</small>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center text-muted py-4 empty-state-message">
                                        <i class="bx bx-shield-x display-4"></i>
                                        <p class="mt-2">No permissions assigned</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-footer bg-white d-flex justify-content-between align-items-center text-muted small py-2 px-3">
                            <div class="d-flex align-items-center gap-2">
                                <span class="fw-semibold">Assigned:</span>
                                <span id="assignedCount" class="badge bg-label-success px-2 py-1" style="font-size: 0.75rem;">
                                    0
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @* <!-- Summary -->
            <div class="row mt-3">
                <div class="col-12">
                    <div class="alert alert-light">
                        <div class="row text-center">
                            <div class="col-md-4">
                                <strong>Available:</strong> <span id="availableCount" class="badge bg-primary">0</span>
                            </div>
                            <div class="col-md-4">
                                <strong>Assigned:</strong> <span id="assignedCount" class="badge bg-success">0</span>
                            </div>
                            <div class="col-md-4">
                                <strong>Total:</strong> <span id="totalCount" class="badge bg-secondary">0</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div> *@

            <!-- Hidden inputs for form submission -->
            <input type="hidden" asp-for="RoleId" id="selectedRoleId" />
            <div id="permissionInputs"></div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="bx bx-x-circle me-1"></i>Close
        </button>
        <button type="submit" class="btn btn-secondary" id="saveButton" disabled>
            <i class="bx bx-save me-1"></i>No Changes
        </button>
    </div>
</form>

<style>
    .modal-body {
        overflow-y: auto;
        max-height: calc(100vh - 200px);
        padding-right: 15px;
    }

    .bg-label-success {
        background-color: #e8fadf !important;
        color: #71dd37 !important
    }

    .bg-label-info {
        background-color: #d7f5fc !important;
        color: #03c3ec !important
    }

    .permission-item {
        background: #fff;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
    }

    .custom-outline-info {
        font-size: 0.775rem !important;
        color: #0dcaf0;
        background-color: transparent;
        border: 1px solid #0dcaf0;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out;
    }

        .custom-outline-info:hover,
        .custom-outline-info:focus {
            color: white;
            background-color: #0dcaf0;
            border-color: #0dcaf0;
            text-decoration: none;
            outline: none;
        }

        .custom-outline-info:active {
            background-color: #0bb7d8;
            border-color: #0bb7d8;
            color: white;
        }


    .permission-item:hover {
        border-color: #007bff;
        box-shadow: 0 2px 4px rgba(0,123,255,0.1);
        transform: translateY(-1px);
    }

    .permission-item.selected {
        background: #e3f2fd;
        border-color: #2196f3;
        box-shadow: 0 0 0 2px rgba(33,150,243,0.2);
    }

    .permission-item.dragging {
        opacity: 0.5;
        transform: rotate(5deg);
    }

    .permission-container {
        transition: all 0.3s ease;
    }

        .permission-container.drag-over {
            border-color: #007bff !important;
            background-color: #f8f9ff;
            border-style: solid !important;
        }

        .permission-container:empty::after {
            content: "Drop permissions here";
            display: block;
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 20px;
        }

    .permission-item .fw-medium {
        font-size: 14px;
        color: #2c3e50;
    }

    .permission-item small {
        font-size: 12px;
        line-height: 1.3;
    }

    .permission-item:hover .fw-medium {
        color: #007bff;
    }

    .btn-sm {
        font-size: 11px;
        padding: 4px 8px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }

    .alert-info {
        background-color: #e3f2fd;
        border-color: #bbdefb;
        color: #1976d2;
    }

    /* #roleSelect {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 10px 15px;
        font-size: 14px;
    } */

    #roleSelect:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }

    /* #instructionsToggle {
        border-radius: 20px;
        font-size: 13px;
        padding: 6px 15px;
        transition: all 0.2s ease;
        border: 1px solid #17a2b8;
        color: #17a2b8;
    }

    #instructionsToggle:hover {
        background-color: #17a2b8;
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(23,162,184,0.2);
    }
     */
    /* #instructionsPanel {
        border-left: 4px solid #17a2b8;
        background-color: #e8f4f8;
        border-color: #bee5eb;
    }

    #instructionsPanel strong {
        color: #0c5460;
    }

    #instructionsPanel kbd {
        background-color: #17a2b8;
        color: white;
        border: none;
        font-size: 11px;
        padding: 2px 6px;
        border-radius: 3px;
    } */

    /* Enhanced Lock Icon Styles */
    .permission-item i {
        font-size: 18px !important;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

        /* Available permissions - locked state */
        .permission-item i.bx-lock {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white !important;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
        }

        /* Assigned permissions - unlocked state */
        .permission-item i.bx-lock-open {
            background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
            color: white !important;
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
        }

    /* Hover effects for lock icons */
    .permission-item:hover i.bx-lock {
        transform: scale(1.1) rotate(-5deg);
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
    }

    .permission-item:hover i.bx-lock-open {
        transform: scale(1.1) rotate(5deg);
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
        background: linear-gradient(135deg, #1e7e34 0%, #155724 100%);
    }

    /* Selected state for lock icons */
    .permission-item.selected i.bx-lock {
        transform: scale(1.15);
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.3), 0 4px 15px rgba(0, 123, 255, 0.4);
        animation: pulse-blue 1.5s infinite;
    }

    .permission-item.selected i.bx-lock-open {
        transform: scale(1.15);
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.3), 0 4px 15px rgba(40, 167, 69, 0.4);
        animation: pulse-green 1.5s infinite;
    }

    /* Dragging state for lock icons */
    .permission-item.dragging i {
        transform: scale(0.9) rotate(15deg);
        opacity: 0.7;
        filter: blur(1px);
    }

    /* Pulse animations */
    @@keyframes pulse-blue {
        0%, 100% {
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.3), 0 4px 15px rgba(0, 123, 255, 0.4);
        }

        50% {
            box-shadow: 0 0 0 6px rgba(0, 123, 255, 0.2), 0 6px 20px rgba(0, 123, 255, 0.5);
        }
    }

    @@keyframes pulse-green {
        0%, 100% {
            box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.3), 0 4px 15px rgba(40, 167, 69, 0.4);
        }

        50% {
            box-shadow: 0 0 0 6px rgba(40, 167, 69, 0.2), 0 6px 20px rgba(40, 167, 69, 0.5);
        }
    }

    /* Lock transformation animation when moving between panels */
    @@keyframes lock-to-unlock {
        0% {
            transform: scale(1) rotate(0deg);
        }

        50% {
            transform: scale(1.3) rotate(-10deg);
        }

        100% {
            transform: scale(1) rotate(0deg);
        }
    }

    @@keyframes unlock-to-lock {
        0% {
            transform: scale(1) rotate(0deg);
        }

        50% {
            transform: scale(1.3) rotate(10deg);
        }

        100% {
            transform: scale(1) rotate(0deg);
        }
    }

    /* Apply animations when icons change */
    .permission-item i.icon-changing {
        animation: lock-to-unlock 0.6s ease-in-out;
    }

    /* Enhanced permission item styling to complement the icons */
    .permission-item {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 8px 15px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        user-select: none;
        position: relative;
        overflow: hidden;
    }

        .permission-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.5s ease;
        }

        .permission-item:hover::before {
            left: 100%;
        }

        .permission-item:hover {
            border-color: transparent;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .permission-item.selected {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border-color: #2196f3;
            transform: translateY(-1px);
        }

        /* Text styling improvements */
        .permission-item .fw-medium {
            font-size: 14px;
            color: #2c3e50;
            font-weight: 600;
        }

        .permission-item small {
            font-size: 12px;
            line-height: 1.4;
            color: #6c757d;
        }
</style>

<script src="~/js/searchselect.js"></script>
<script>
    (function() {
        let draggedItems = [];
        let originalPermissionIds = [];
        let hasChanges = false;

        function loadRolePermissions(roleId) {
            if (!roleId) {
                document.getElementById('permissionManagement').style.display = 'none';
                document.getElementById('saveButton').disabled = true;
                return;
            }

            // Show loading state
            document.getElementById('availablePermissionsList').innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading permissions...</p></div>';
            document.getElementById('assignedPermissionsList').innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading permissions...</p></div>';

            fetch(`/Identity/GetRolePermissions?roleId=${roleId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updatePermissionLists(data.availablePermissions, data.assignedPermissions);
                        document.getElementById('selectedRoleId').value = roleId;
                        document.getElementById('permissionManagement').style.display = 'block';

                        // Store original permission IDs for change tracking
                        originalPermissionIds = data.assignedPermissions.map(p => p.permissionId);
                        hasChanges = false;
                        updateSaveButtonState();

                        // Ensure counts are updated after making the section visible
                        setTimeout(() => {
                            updateCounts();
                        }, 100);
                    } else {
                        alert('Error loading permissions: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Error loading permissions');
                });
        }

        function updateSaveButtonState() {
            const currentPermissionIds = Array.from(document.querySelectorAll('#assignedPermissionsList .permission-item'))
                .map(item => parseInt(item.getAttribute('data-permission-id')))
                .filter(id => !isNaN(id)); // Filter out any NaN values

            // Sort both arrays for proper comparison
            const sortedOriginal = [...originalPermissionIds].sort((a, b) => a - b);
            const sortedCurrent = [...currentPermissionIds].sort((a, b) => a - b);

            // Check if current permissions are different from original
            const permissionsChanged = !arraysEqual(sortedOriginal, sortedCurrent);



            const saveButton = document.getElementById('saveButton');
            if (permissionsChanged) {
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="bx bx-save me-1"></i>Save Changes';
                saveButton.classList.remove('btn-secondary');
                saveButton.classList.add('btn-primary');
                hasChanges = true;
            } else {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="bx bx-save me-1"></i>No Changes';
                saveButton.classList.remove('btn-primary');
                saveButton.classList.add('btn-secondary');
                hasChanges = false;
            }
        }

        function arraysEqual(a, b) {
            if (a.length !== b.length) return false;
            for (let i = 0; i < a.length; i++) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        }

        function updatePermissionLists(availablePermissions, assignedPermissions) {
            const availableContainer = document.getElementById('availablePermissionsList');
            const assignedContainer = document.getElementById('assignedPermissionsList');

            // Update available permissions
            availableContainer.innerHTML = availablePermissions.map(permission => `
                <div class="permission-item"
                     data-permission-id="${permission.permissionId}"
                     draggable="true"
                     ondragstart="drag(event)"
                     ondblclick="moveToAssigned(${permission.permissionId})"
                     onclick="toggleSelection(this, event)">
                    <div class="d-flex align-items-center">
                        <i class="bx bx-lock me-2 text-primary"></i>
                        <div>
                            <div class="fw-medium">${permission.permissionName}</div>
                            ${permission.description ? `<small class="text-muted">${permission.description}</small>` : ''}
                        </div>
                    </div>
                </div>
            `).join('');

            // Update assigned permissions
            assignedContainer.innerHTML = assignedPermissions.map(permission => `
                <div class="permission-item"
                     data-permission-id="${permission.permissionId}"
                     draggable="true"
                     ondragstart="drag(event)"
                     ondblclick="moveToAvailable(${permission.permissionId})"
                     onclick="toggleSelection(this, event)">
                    <div class="d-flex align-items-center">
                        <i class="bx bx-lock-open me-2 text-success"></i>
                        <div>
                            <div class="fw-medium">${permission.permissionName}</div>
                            ${permission.description ? `<small class="text-muted">${permission.description}</small>` : ''}
                        </div>
                    </div>
                </div>
            `).join('');

            updateHiddenInputs();
        }

        function toggleSelection(element, event) {
            if (event.ctrlKey || event.metaKey) {
                element.classList.toggle('selected');
            } else {
                // Clear other selections and select this one
                document.querySelectorAll('.permission-item.selected').forEach(item => {
                    item.classList.remove('selected');
                });
                element.classList.add('selected');
            }
        }

        function selectAllAvailable() {
            document.querySelectorAll('#availablePermissionsList .permission-item').forEach(item => {
                item.classList.add('selected');
            });
        }

        function clearSelectionAvailable() {
            document.querySelectorAll('#availablePermissionsList .permission-item').forEach(item => {
                item.classList.remove('selected');
            });
        }

        function selectAllAssigned() {
            document.querySelectorAll('#assignedPermissionsList .permission-item').forEach(item => {
                item.classList.add('selected');
            });
        }

        function clearSelectionAssigned() {
            document.querySelectorAll('#assignedPermissionsList .permission-item').forEach(item => {
                item.classList.remove('selected');
            });
        }

        function moveSelectedToAssigned() {
            const selectedItems = document.querySelectorAll('#availablePermissionsList .permission-item.selected');
            const assignedContainer = document.getElementById('assignedPermissionsList');

            if (selectedItems.length === 0) {
                return; // No items selected, nothing to do
            }

            selectedItems.forEach(item => {
                item.classList.remove('selected');
                const icon = item.querySelector('i');

                // Add animation class
                icon.classList.add('icon-changing');

                // Change icon with delay for animation
                setTimeout(() => {
                    icon.className = 'bx bx-lock-open me-2 text-success';
                    assignedContainer.appendChild(item);

                    // Remove animation class after animation completes
                    setTimeout(() => {
                        icon.classList.remove('icon-changing');
                    }, 600);
                }, 100);
            });

            // Update after all items are moved - increased delay to ensure DOM is updated
            setTimeout(() => {
                updateHiddenInputs();
                updateSaveButtonState();
            }, 300);
        }

        function moveSelectedToAvailable() {
            const selectedItems = document.querySelectorAll('#assignedPermissionsList .permission-item.selected');
            const availableContainer = document.getElementById('availablePermissionsList');

            if (selectedItems.length === 0) {
                return; // No items selected, nothing to do
            }

            selectedItems.forEach(item => {
                item.classList.remove('selected');
                const icon = item.querySelector('i');

                // Add animation class
                icon.classList.add('icon-changing');

                // Change icon with delay for animation
                setTimeout(() => {
                    icon.className = 'bx bx-lock me-2 text-primary';
                    availableContainer.appendChild(item);

                    // Remove animation class after animation completes
                    setTimeout(() => {
                        icon.classList.remove('icon-changing');
                    }, 600);
                }, 100);
            });

            // Update after all items are moved - increased delay to ensure DOM is updated
            setTimeout(() => {
                updateHiddenInputs();
                updateSaveButtonState();
            }, 300);
        }

        function drag(event) {
            const selectedItems = document.querySelectorAll('.permission-item.selected');
            if (selectedItems.length === 0) {
                // If no items selected, select the dragged item
                event.target.closest('.permission-item').classList.add('selected');
            }

            draggedItems = Array.from(document.querySelectorAll('.permission-item.selected'));
            draggedItems.forEach(item => item.classList.add('dragging'));

            event.dataTransfer.setData("text/plain", "");
        }

        function allowDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.add('drag-over');
        }

        function drop(event, targetType) {
            event.preventDefault();
            event.currentTarget.classList.remove('drag-over');

            const targetContainer = targetType === 'available' ?
                document.getElementById('availablePermissionsList') :
                document.getElementById('assignedPermissionsList');

            draggedItems.forEach(item => {
                item.classList.remove('dragging', 'selected');

                // Update icon based on target
                const icon = item.querySelector('i');
                if (targetType === 'available') {
                    icon.className = 'bx bx-lock me-2 text-primary';
                } else {
                    icon.className = 'bx bx-lock-open me-2 text-success';
                }

                targetContainer.appendChild(item);
            });

            draggedItems = [];

            // Update with delay to ensure DOM is updated
            setTimeout(() => {
                updateHiddenInputs();
                updateSaveButtonState();
            }, 100);

            // Remove drag-over class from all containers
            document.querySelectorAll('.permission-container').forEach(container => {
                container.classList.remove('drag-over');
            });
        }

        function moveToAssigned(permissionId) {
            const item = document.querySelector(`[data-permission-id="${permissionId}"]`);
            if (item && item.closest('#availablePermissionsList')) {
                const icon = item.querySelector('i');
                icon.className = 'bx bx-lock-open me-2 text-success';
                document.getElementById('assignedPermissionsList').appendChild(item);

                // Update with delay to ensure DOM is updated
                setTimeout(() => {
                    updateHiddenInputs();
                    updateEmptyStates();
                    updateSaveButtonState();
                }, 50);
            }
        }

        function moveToAvailable(permissionId) {
            const item = document.querySelector(`[data-permission-id="${permissionId}"]`);
            if (item && item.closest('#assignedPermissionsList')) {
                const icon = item.querySelector('i');
                icon.className = 'bx bx-lock me-2 text-primary';
                document.getElementById('availablePermissionsList').appendChild(item);

                // Update with delay to ensure DOM is updated
                setTimeout(() => {
                    updateHiddenInputs();
                    updateEmptyStates();
                    updateSaveButtonState();
                }, 50);
            }
        }

        function updateHiddenInputs() {
            const assignedPermissions = document.querySelectorAll('#assignedPermissionsList .permission-item');
            const availablePermissions = document.querySelectorAll('#availablePermissionsList .permission-item');
            const permissionInputsContainer = document.getElementById('permissionInputs');

            permissionInputsContainer.innerHTML = '';

            assignedPermissions.forEach((item, index) => {
                const permissionId = item.getAttribute('data-permission-id');
                if (permissionId) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = `PermissionIds[${index}]`;
                    input.value = permissionId;
                    permissionInputsContainer.appendChild(input);
                }
            });

            updateCounts();

            // Update empty states
            updateEmptyStates();
        }

        function updateCounts() {
            const assignedPermissions = document.querySelectorAll('#assignedPermissionsList .permission-item');
            const availablePermissions = document.querySelectorAll('#availablePermissionsList .permission-item');

            const availableCount = availablePermissions.length;
            const assignedCount = assignedPermissions.length;
            const totalCount = availableCount + assignedCount;
            const availableCountElement = document.getElementById('availableCount');
            const assignedCountElement = document.getElementById('assignedCount');
            const totalCountElement = document.getElementById('totalCount');

            if (availableCountElement) availableCountElement.textContent = availableCount;
            if (assignedCountElement) assignedCountElement.textContent = assignedCount;
            if (totalCountElement) totalCountElement.textContent = totalCount;
        }

        function updateEmptyStates() {
            const availableContainer = document.getElementById('availablePermissionsList');
            const assignedContainer = document.getElementById('assignedPermissionsList');

            const availablePermissions = availableContainer.querySelectorAll('.permission-item');
            const assignedPermissions = assignedContainer.querySelectorAll('.permission-item');

            // Remove existing empty state messages
            const existingEmptyStates = document.querySelectorAll('.empty-state-message');
            existingEmptyStates.forEach(state => state.remove());

            // Add empty state for available permissions if needed
            if (availablePermissions.length === 0) {
                const emptyState = document.createElement('div');
                emptyState.className = 'text-center text-muted py-4 empty-state-message';
                emptyState.innerHTML = '<i class="bx bx-check-circle display-4"></i><p class="mt-2">All permissions are assigned</p>';
                availableContainer.appendChild(emptyState);
            }

            // Add empty state for assigned permissions if needed
            if (assignedPermissions.length === 0) {
                const emptyState = document.createElement('div');
                emptyState.className = 'text-center text-muted py-4 empty-state-message';
                emptyState.innerHTML = '<i class="bx bx-shield-x display-4"></i><p class="mt-2">No permissions assigned</p>';
                assignedContainer.appendChild(emptyState);
            }
        }

        function toggleInstructions() {
        const panel = document.getElementById('instructionsPanel');
        const toggleText = document.getElementById('instructionsToggleText');
        const chevron = document.getElementById('instructionsChevron');

        if (panel.style.display === 'none') {
            // Show instructions
            panel.style.display = 'block';
            toggleText.textContent = 'Hide Instructions';
            chevron.className = 'bx bx-chevron-up ms-1';
            panel.style.fontSize = '0.9rem';

            // Add smooth slide down animation
            panel.style.opacity = '0';
            panel.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                panel.style.transition = 'all 0.3s ease';
                panel.style.opacity = '1';
                panel.style.transform = 'translateY(0)';
            }, 10);
        } else {
            // Hide instructions
            panel.style.transition = 'all 0.3s ease';
            panel.style.opacity = '0';
            panel.style.transform = 'translateY(-10px)';

            setTimeout(() => {
                panel.style.display = 'none';
                toggleText.textContent = 'Show Instructions';
                chevron.className = 'bx bx-chevron-down ms-1';
                panel.style.fontSize = '';

            }, 300);
        }
    }

        function filterPermissions(type) {
            const searchInput = type === 'available' ?
                document.getElementById('searchAvailable') :
                document.getElementById('searchAssigned');
            const container = type === 'available' ?
                document.getElementById('availablePermissionsList') :
                document.getElementById('assignedPermissionsList');

            const searchTerm = searchInput.value.toLowerCase();
            const permissionItems = container.querySelectorAll('.permission-item');

            permissionItems.forEach(item => {
                const permissionName = item.querySelector('.fw-medium').textContent.toLowerCase();
                const description = item.querySelector('small')?.textContent.toLowerCase() || '';

                if (permissionName.includes(searchTerm) || description.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Remove drag-over class when dragging leaves the container
        document.addEventListener('dragleave', function(event) {
            if (event.target.classList.contains('permission-container')) {
                event.target.classList.remove('drag-over');
            }
        });

        // Make functions globally accessible for inline event handlers
        window.loadRolePermissions = loadRolePermissions;
        window.toggleSelection = toggleSelection;
        window.selectAllAvailable = selectAllAvailable;
        window.clearSelectionAvailable = clearSelectionAvailable;
        window.selectAllAssigned = selectAllAssigned;
        window.clearSelectionAssigned = clearSelectionAssigned;
        window.moveSelectedToAssigned = moveSelectedToAssigned;
        window.moveSelectedToAvailable = moveSelectedToAvailable;
        window.drag = drag;
        window.allowDrop = allowDrop;
        window.drop = drop;
        window.moveToAssigned = moveToAssigned;
        window.moveToAvailable = moveToAvailable;
        window.toggleInstructions = toggleInstructions;
        window.filterPermissions = filterPermissions;

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Check if permission management is visible (role already selected)
            const permissionManagement = document.getElementById('permissionManagement');
            if (permissionManagement && permissionManagement.style.display !== 'none') {
                updateHiddenInputs();
                updateCounts();

                // Initialize original permissions for change tracking
                const assignedItems = document.querySelectorAll('#assignedPermissionsList .permission-item');
                originalPermissionIds = Array.from(assignedItems).map(item => parseInt(item.getAttribute('data-permission-id')));
                updateSaveButtonState();
            } else {
                // Initialize counts to 0 when no role is selected
                document.getElementById('availableCount').textContent = '0';
                document.getElementById('assignedCount').textContent = '0';
                document.getElementById('totalCount').textContent = '0';
            }
        });
            $(document).on('itemSelected', '.searchable-select[data-name="RoleId"]', function (e, data) {
                    const roleId = data.id;
                    if (roleId) {
                        loadRolePermissions(roleId);
                    } else {
                        // Hide permissions area & disable save if no role selected
                        document.getElementById('permissionManagement').style.display = 'none';
                        document.getElementById('saveButton').disabled = true;
                    }
                });
        // Initialize immediately if DOM is already loaded
        if (document.readyState === 'loading') {
            // DOM is still loading
        } else {
            // DOM is already loaded
            const permissionManagement = document.getElementById('permissionManagement');
            if (permissionManagement && permissionManagement.style.display !== 'none') {
                updateHiddenInputs();
                updateCounts();

                const assignedItems = document.querySelectorAll('#assignedPermissionsList .permission-item');
                originalPermissionIds = Array.from(assignedItems).map(item => parseInt(item.getAttribute('data-permission-id')));
                updateSaveButtonState();
            } else {
                const availableCountEl = document.getElementById('availableCount');
                const assignedCountEl = document.getElementById('assignedCount');
                const totalCountEl = document.getElementById('totalCount');

                if (availableCountEl) availableCountEl.textContent = '0';
                if (assignedCountEl) assignedCountEl.textContent = '0';
                if (totalCountEl) totalCountEl.textContent = '0';
            }
        }
    })();
</script>