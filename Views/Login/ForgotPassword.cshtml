@model hongWenAPP.Models.IdentityModel.DTOs.ForgotPasswordDTO
@{
    Layout = "_LoginLayout";
}

<style>
   .background-bleed {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('@Url.Content("~/assets/img/Cover-Page-Final.jpg")');
        background-repeat: no-repeat;
        background-position: center top;
        background-size: 100% auto;
        z-index: -1;
    }
    .card-body{
        padding:2.3rem !important;
    }

    .title-detail {
        font-size: 14px;
    }

    .form-label {
        text-transform: none;
        font-size: 14px;
        font-weight: 600 !important;
    }

    .form-check-label {
        font-size: 14px;
    }

    .form-floating-custom {
        position: relative;
        margin-bottom:2rem;
    }

    .input-wrapper {
        position: relative;
    }

    .input-wrapper .form-control {
        padding-left: 2.5rem; 
        height: 45px;
        width: 100%;
        box-sizing: border-box;
    }

    .input-wrapper .input-icon {
        position: absolute;
        top: 50%;
        left: 1rem;
        transform: translateY(-50%);
        color: #999;
        font-size: 1.1rem;
        pointer-events: none;
    }

    input[type="password"]::-ms-reveal,
    input[type="password"]::-ms-clear {
        display: none;
    }

    /* Hide Chrome's reveal button */
    input[type="password"]::-webkit-password-toggle-button {
        display: none;
    }

    .spinner-border {
        width: 1rem;
        height: 1rem;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

</style>
<div class="background-bleed"></div>
<div class="container-xxl">
    <div class="authentication-wrapper authentication-basic container-p-y">
        <div class="authentication-inner">
            <div class="card forgot-password-card">
                <div class="card-body">
                    <div class="mb-3">
                        <h4 class="mb-1">Forgot Password?</h4>
                        <p class="mb-0 title-detail text-muted fw-semibold">No worries! Enter your email and we'll send you reset instructions.</p>
                    </div>

                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show success-animation" role="alert">
                            <i class='bx bx-check-circle me-2'></i>
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class='bx bx-error-circle me-2'></i>
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                   
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger py-2 px-3 alert-animated" role="alert">
                            <ul class="mb-0 list-unstyled text-center fw-semibold">
                                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                {
                                    <li><small>@error.ErrorMessage</small></li>
                                }
                            </ul>
                        </div>
                    }
                    <form id="forgotPasswordForm" class="mb-4" method="post" asp-controller="Login" asp-action="ForgotPassword">
                        @Html.AntiForgeryToken()
                        
                        <div class="form-floating-custom">
                            <label for="email" class="form-label">Email</label>
                            <div class="input-wrapper">
                                <i class='bx bx-at input-icon'></i>
                                <input asp-for="Email"
                                       type="text"
                                       id="email"
                                       class="form-control"
                                       placeholder="Enter your email address"
                                       autofocus
                                       
                                       />
                            </div>
                            <small asp-validation-for="Email" id="emailError" class="text-danger"></small>
                        </div>  
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="col-4">
                                <a href="@Url.Action("Index", "Login")" class="btn btn-sm btn-outline-secondary d-inline-flex align-items-center">
                                    <i class='bx bx-arrow-back me-2'></i>
                                    Back
                                </a>
                            </div>
                            <div class="col-8 text-end">
                                <button id="submitBtn" class="btn btn-sm btn-primary d-inline-flex align-items-center position-relative">
                                    <span class="btn-text d-flex align-items-center">
                                        <i class='bx bx-paper-plane me-2'></i>
                                        Send Reset Link
                                    </span>
                                    <span class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        $(document).ready(function () {
            const $emailInput = $('#email');
            const $emailError = $('#emailError');
            const $submitBtn = $('#submitBtn');
            const $spinner = $submitBtn.find('.spinner-border');

            function isValidEmail(email) {
                const regex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                return regex.test(email);
            }

            function showError($input, message) {
                $input.addClass('is-invalid');
                $input.closest('.form-floating-custom').find('.text-danger').text(message);
            }

            function clearError($input) {
                $input.removeClass('is-invalid');
                $input.closest('.form-floating-custom').find('.text-danger').text('');
            }


            $emailInput.on('input', function () {
                const email = $(this).val().trim();

                // Clear error if valid
                if (email.length > 0 && email.length <= 100 && isValidEmail(email)) {
                    clearError($emailInput);
                }
            });


            $('#forgotPasswordForm').on('submit', function (e) {
                e.preventDefault();

                const email = $emailInput.val().trim();

                if (email.length === 0) {
                    showError($emailInput, 'Email is required.');
                    return;
                }

                if (email.length > 100) {
                    showError($emailInput, 'Email cannot exceed 100 characters.');
                    return;
                }

                if (!isValidEmail(email)) {
                    showError($emailInput, 'Invalid email format.');
                    return;
                }

                clearError($emailInput);

                $spinner.removeClass('d-none');
                $submitBtn.prop('disabled', true);

                setTimeout(() => {
                    this.submit();
                }, 5000);
            });
        });
    </script>
}

