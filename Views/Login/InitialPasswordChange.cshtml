@model hongWenAPP.Models.IdentityModel.DTOs.ChangePasswordDTO
@{
    Layout = "_LoginLayout";
    ViewData["Title"] = "Set New Password";
}

<style>
    .background-bleed {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('@Url.Content("~/assets/img/Cover-Page-Final.jpg")');
        background-repeat: no-repeat;
        background-position: center top;
        background-size: 100% auto;
        z-index: -1;
    }
    .card-body {
        padding: 2.3rem;
    }

    .title-detail {
        font-size: 14px;
    }

    .form-label {
        text-transform: none;
        font-size: 14px;
        font-weight: 600 !important;
    }

    .password-field {
        margin-bottom: 1rem;
    }

    .input-wrapper {
        position: relative;
        margin-bottom: 0.25rem;
    }

    .input-wrapper .form-control {
        padding-left: 2.75rem; /* space for left icon */
        padding-right: 3rem; /* space for right toggle button */
        height: 2.5rem;
        font-size: 1rem;
        line-height: 1.5;
    }

    .input-wrapper .input-icon {
        position: absolute;
        top: 50%;
        left: 0.75rem;
        transform: translateY(-50%);
        font-size: 1.25rem;
        color: #6c757d;
        pointer-events: none;
        user-select: none;
        line-height: 1;
    }

    .input-wrapper .password-toggle {
        position: absolute;
        top: 50%;
        right: 0.75rem;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: #6c757d;
        font-size: 1.25rem;
        padding: 0;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .input-wrapper .password-toggle:hover {
            color: #0d6efd;
        }

    input[type="password"]::-ms-reveal,
    input[type="password"]::-ms-clear {
        display: none;
    }

    /* Hide Chrome's reveal button */
    input[type="password"]::-webkit-password-toggle-button {
        display: none;
    }

    .password-strength {
        margin-top: 0.5rem;
        font-size: 0.875rem;
        display: none;
    }

    .strength-bar {
        height: 4px;
        border-radius: 2px;
        background: #e9ecef;
        margin-top: 0.3rem;
        overflow: hidden;
    }

    .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
    }

    .strength-weak {
        background: #dc3545;
        width: 25%;
    }

    .strength-fair {
        background: #fd7e14;
        width: 50%;
    }

    .strength-good {
        background: #ffc107;
        width: 75%;
    }

    .strength-strong {
        background: #28a745;
        width: 100%;
    }

    .requirements-list {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
        font-size: 0.875rem;
    }

    .requirement {
        display: flex;
        align-items: center;
        margin-bottom: 0.3rem;
        transition: color 0.3s ease;
    }

        .requirement:last-child {
            margin-bottom: 0;
        }

        .requirement.met {
            color: #28a745;
        }

            .requirement.met i {
                color: #28a745;
            }

        .requirement i {
            margin-right: 0.5rem;
            width: 16px;
            color: #6c757d;
            transition: color 0.3s ease;
        }

    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }
    }

    .match-indicator {
        position: absolute;
        right: 3rem;
        top: 50%;
        transform: translateY(-50%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .match-indicator.show {
            opacity: 1;
        }

        .match-indicator.match {
            color: #28a745;
        }

        .match-indicator.no-match {
            color: #dc3545;
        }

    /* Alert animations */
    .alert-animated {
        font-weight: 600;
        padding: 10px 15px;
        opacity: 0;
        transform: translateY(-10px);
        animation: fadeInSlide 0.5s ease-in-out forwards;
        transition: opacity 0.5s ease, height 0.5s ease, padding 0.5s ease;
    }


    @@keyframes fadeInSlide {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeOutSlide {
        from {
            opacity: 1;
            transform: translateY(0);
        }

        to {
            opacity: 0;
            transform: translateY(10px);
        }
    }

    .fade-out {
        animation: fadeOutSlide 1s ease-in-out forwards;
    }

    .alert-hidden {
        display: none;
        opacity: 0;
        height: 0;
        overflow: hidden;
    }

    .strength-bar {
        height: 4px;
        border-radius: 2px;
        background: #e9ecef;
        margin-top: 0.5rem;
        overflow: hidden;
    }

    .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
    }

    .strength-weak {
        background: #dc3545;
        width: 25%;
    }

    .strength-fair {
        background: #fd7e14;
        width: 50%;
    }

    .strength-good {
        background: #ffc107;
        width: 75%;
    }

    .strength-strong {
        background: #28a745;
        width: 100%;
    }

    .spinner-border {
        width: 1rem;
        height: 1rem;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }
</style>
<div class="background-bleed"></div>
<div class="container-xxl">
    <div class="authentication-wrapper authentication-basic container-p-y">
        <div class="authentication-inner">
            <div class="card initial-password-card">
                <div class="card-body">
                    <div class="mb-3">
                        <h4 class="mb-1">Set New Password</h4>
                        <p class="mb-0 title-detail text-muted fw-semibold">Welcome! For security, please create a strong new password</p>
                    </div>

                    <!-- Info Messages -->
                    @if (TempData["InfoMessage"] != null)
                    {
                        <div class="alert alert-info py-2 px-3 alert-animated" role="alert">
                            <i class='bx bx-info-circle me-2'></i><small class="fw-semibold lh-1">@TempData["InfoMessage"]</small>
                        </div>
                    }

                    <!-- Error Messages -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger mt-3 list-unstyled" role="alert">
                            <small asp-validation-summary="ModelOnly" class="mb-0 text-danger"></small>
                        </div>
                    }

                    <form id="initialPasswordForm" class="mb-4" method="POST" asp-controller="Login" asp-action="InitialPasswordChange">
                        @Html.AntiForgeryToken()
                        
                        <!-- Note about current credentials -->
                        <div class="alert alert-warning py-2 px-3 mb-3 alert-animated" role="alert">
                            <i class='bx bx-shield-quarter me-2'></i>
                            <small class="lh-1"><strong>Note:</strong> You're logged in with your current credentials. Please create a new secure password.</small>
                        </div>
                        
                        <div class="password-field">
                            <label for="new_password" class="form-label">New Password</label>
                            <div class="input-wrapper position-relative">
                                <input asp-for="NewPassword"
                                       id="newPassword"
                                       type="password"
                                       class="form-control"
                                       placeholder="Enter new password"
                                       autofocus
                                       required />
                                <i class='bx bx-lock-alt input-icon'></i>
                                <button type="button" class="password-toggle" data-target="newPassword">
                                    <i class='bx bx-hide'></i>
                                </button>
                            </div>
                            <small asp-validation-for="NewPassword" class="text-danger small"></small>
                            
                            <div class="password-strength">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">Password strength:</small>
                                    <small id="strengthText" class="text-muted">Enter password</small>
                                </div>
                                <div class="strength-bar">
                                    <div id="strengthFill" class="strength-fill"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="password-field">
                            <label for="confirm_password" class="form-label">Confirm Password</label>
                            <div class="input-wrapper position-relative">
                                <input asp-for="ConfirmPassword"
                                       id="confirmPassword"
                                       type="password"
                                       class="form-control"
                                       placeholder="Confirm new password"
                                       required />
                                <i class='bx bx-lock-alt input-icon'></i>
                                <button type="button" class="password-toggle" data-target="confirmPassword">
                                    <i class='bx bx-hide'></i>
                                </button>
                            </div>
                            <small asp-validation-for="ConfirmPassword" class="text-danger small"></small>
                        </div>

                        <div class="requirements-list mb-3">
                            <div class="requirement" id="req-length">
                                <i class='bx bx-x'></i>
                                <span>At least 8 characters</span>
                            </div>
                            <div class="requirement" id="req-uppercase">
                                <i class='bx bx-x'></i>
                                <span>One uppercase letter</span>
                            </div>
                            <div class="requirement" id="req-lowercase">
                                <i class='bx bx-x'></i>
                                <span>One lowercase letter</span>
                            </div>
                            <div class="requirement" id="req-number">
                                <i class='bx bx-x'></i>
                                <span>One number</span>
                            </div>
                            <div class="requirement" id="req-special">
                                <i class='bx bx-x'></i>
                                <span>One special character</span>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-end align-items-center">
                            <div class="col-4">
                                <a href="@Url.Action("Index", "Login")" class="btn btn-sm btn-outline-secondary">
                                    <i class='bx bx-arrow-back me-2'></i>
                                    <span>Back</span>
                                </a>
                            </div>
                            <div class="col-8 d-flex justify-content-end">
                                <button type="submit" id="submitBtn" class="btn btn-sm btn-primary">
                                    <span class="btn-text">
                                        <i class='bx bx-check-shield me-1'></i>
                                        Set New Password
                                    </span>
                                    <span class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    </form>         
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            setTimeout(function () {
                const alert = $('.alert-warning');

                alert.addClass('fade-out');

                // After fadeOutSlide animation ends (1s), hide the element completely
                setTimeout(function () {
                    alert.addClass('alert-hidden');
                }, 1000); // Match this with the animation duration in `.fade-out`
            }, 5000);

            // Password toggle functionality
            $('.password-toggle').on('click', function() {
                const targetId = $(this).data('target');
                const input = $('#' + targetId);
                const icon = $(this).find('i');
                
                if (input.attr('type') === 'password') {
                    input.attr('type', 'text');
                    icon.removeClass('bx-hide').addClass('bx-show');
                } else {
                    input.attr('type', 'password');
                    icon.removeClass('bx-show').addClass('bx-hide');
                }
            });

            // Password strength checker
            $('#newPassword').on('input', function () {
                const password = $(this).val();

                // Show password strength bar when user starts typing
                if (password.length > 0) {
                    $('.password-strength').fadeIn();
                } else {
                    $('.password-strength').fadeOut();
                }

                checkPasswordStrength(password);
                checkPasswordMatch();
            });

            $('#confirmPassword').on('input', function() {
                checkPasswordMatch();
            });

            function checkPasswordStrength(password) {
                const requirements = {
                    length: password.length >= 8,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /\d/.test(password),
                    special: /[^A-Za-z0-9]/.test(password)
                };

                Object.keys(requirements).forEach(req => {
                    const element = $('#req-' + req);
                    const icon = element.find('i');

                    if (requirements[req]) {
                        element.addClass('met');
                        icon.removeClass('bx-x').addClass('bx-check');
                    } else {
                        element.removeClass('met');
                        icon.removeClass('bx-check').addClass('bx-x');
                    }
                });

                const metCount = Object.values(requirements).filter(Boolean).length;
                const strengthFill = $('#strengthFill');
                const strengthText = $('#strengthText');

                strengthFill.removeClass('strength-weak strength-fair strength-good strength-strong');

                if (password.length === 0) {
                    strengthText.text('Enter password');
                    strengthFill.css('width', '0%');
                } else if (metCount <= 2) {
                    strengthText.text('Weak').css('color', '#dc3545');
                    strengthFill.addClass('strength-weak').css('width', '25%');
                } else if (metCount === 3) {
                    strengthText.text('Fair').css('color', '#fd7e14');
                    strengthFill.addClass('strength-fair').css('width', '50%');
                } else if (metCount === 4) {
                    strengthText.text('Good').css('color', '#ffc107');
                    strengthFill.addClass('strength-good').css('width', '75%');
                } else {
                    strengthText.text('Strong').css('color', '#28a745');
                    strengthFill.addClass('strength-strong').css('width', '100%');
                }
            }

            function checkPasswordMatch() {
                const password = $('#newPassword').val();
                const confirmPassword = $('#confirmPassword').val();
                const errorContainer = $('small[asp-validation-for="ConfirmPassword"]');

                if (confirmPassword.length > 0) {
                    if (password === confirmPassword) {
                        errorContainer.text('');
                    } else {
                        errorContainer.text('Passwords do not match.');
                    }
                } else {
                    errorContainer.text('');
                }
            }

            // Form submission with loading animation
            $('#initialPasswordForm').on('submit', function (e) {
                const submitBtn = $('#submitBtn');
                const spinner = submitBtn.find('.spinner-border');
                const password = $('#newPassword').val();
                const confirmPassword = $('#confirmPassword').val();

                // Clear any previous validation messages
                $('small[asp-validation-for="ConfirmPassword"]').text('');

                if (password && confirmPassword) {
                    if (password === confirmPassword) {
                        spinner.removeClass('d-none');
                        submitBtn.prop('disabled', true);
                        // Allow form to submit immediately for initial password change
                    } else {
                        e.preventDefault();
                        $('small[asp-validation-for="ConfirmPassword"]').text('Passwords do not match.');
                    }
                } else {
                    e.preventDefault();
                    if (!password) {
                        $('small[asp-validation-for="NewPassword"]').text('Please enter a new password.');
                    }
                    if (!confirmPassword) {
                        $('small[asp-validation-for="ConfirmPassword"]').text('Please confirm your password.');
                    }
                }
            });

            // Input focus animations
            $('.password-field input').on('focus', function () {
                $(this).parent().addClass('focused');
            }).on('blur', function () {
                if (!$(this).val()) {
                    $(this).parent().removeClass('focused');
                }
            });

            if ($('.alert-danger').length) {
                $('html, body').animate({
                    scrollTop: $('.alert-danger').offset().top - 100
                }, 500);
            }

            // Hide password strength initially
            $('.password-strength').hide();
        });
      
    </script>
} 