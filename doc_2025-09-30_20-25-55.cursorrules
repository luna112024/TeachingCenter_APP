# Materio Laravel Template - Cursor Rules

## Project Overview

This is a Laravel application using the **Materio Bootstrap HTML Admin Template** from ThemeSelection. The template provides a comprehensive admin dashboard with authentication, role management, and modern UI components.

## Template Documentation

- **Official Docs**: https://demos.themeselection.com/materio-bootstrap-html-admin-template/documentation/laravel-introduction.html
- **Template**: Materio Bootstrap HTML Admin Template
- **Version**: Laravel + HTML version with JetStream authentication

## Project Structure

### Core Framework

- **Laravel**: Latest version with JetStream authentication
- **Authentication**: Laravel JetStream with Fortify
- **Role Management**: Spatie Laravel Permission package
- **Frontend**: Bootstrap 5.3.2 with Material Design Icons
- **Build Tool**: Laravel Mix with Webpack

### Key Directories

```
resources/views/
├── layouts/                    # Main layout files
│   ├── layoutMaster.blade.php # Main layout template
│   ├── horizontalLayout.blade.php
│   ├── contentNavbarLayout.blade.php
│   └── sections/              # Layout sections
│       ├── navbar/            # Navigation components
│       ├── menu/              # Menu components
│       ├── footer/            # Footer components
│       ├── scripts.blade.php # Vendor scripts
│       └── styles.blade.php   # Vendor styles
├── components/                # JetStream components
├── auth/                      # Authentication views
├── users/                     # User management views
├── roles/                     # Role management views
└── permissions/               # Permission management views
```

### Asset Structure

```
resources/assets/
├── vendor/                    # Third-party libraries
│   ├── js/                   # Vendor JavaScript
│   ├── scss/                 # Vendor SCSS
│   ├── libs/                 # Individual library files
│   └── fonts/                # Font files
├── js/                       # Application JavaScript
├── css/                      # Application CSS
└── vendor/                   # Compiled vendor assets
```

## Layout System

### Main Layouts

1. **layoutMaster.blade.php** - Main template with dynamic layout switching
2. **horizontalLayout.blade.php** - Horizontal navigation layout
3. **contentNavbarLayout.blade.php** - Content with navbar layout
4. **blankLayout.blade.php** - Minimal layout for auth pages

### Layout Configuration

- **Config File**: `config/custom.php`
- **Layout Options**: vertical, horizontal
- **Theme Options**: theme-default, theme-bordered, theme-semi-dark
- **Style Options**: light, dark, system mode
- **RTL Support**: Configurable with `myRTLSupport` and `myRTLMode`

### Layout Sections

- **@yield('vendor-style')** - Vendor CSS files
- **@yield('page-style')** - Page-specific CSS
- **@yield('vendor-script')** - Vendor JavaScript files
- **@yield('page-script')** - Page-specific JavaScript
- **@stack('modals')** - Modal components
- **@livewireScripts** - Livewire components

## Vendor Scripts & Styles

### Core Dependencies

- **Bootstrap**: 5.3.2
- **jQuery**: 3.7.0
- **Material Design Icons**: Material Design Icons
- **Perfect Scrollbar**: Custom scrollbars
- **Node Waves**: Ripple effects
- **Hammer.js**: Touch gestures

### Key Vendor Libraries

```javascript
// Core Bootstrap & jQuery
jquery, popper.js, bootstrap;

// UI Components
perfect - scrollbar, node - waves, hammer.js, typeahead.js;

// Data Tables
datatables.net, datatables.net - bs5, datatables.net - buttons;

// Charts & Visualization
chart.js, apexcharts - clevision;

// Form Components
select2, flatpickr, cleave.js, quill, dropzone;

// UI Enhancements
sweetalert2, toastr, animate.css, aos;

// Utilities
moment.js, clipboard.js, sortablejs;
```

### Asset Loading Pattern

```blade
<!-- Vendor Scripts -->
<script src="{{ asset(mix('assets/vendor/libs/jquery/jquery.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/js/bootstrap.js')) }}"></script>
@yield('vendor-script')

<!-- Theme Scripts -->
<script src="{{ asset(mix('assets/js/main.js')) }}"></script>
@yield('page-script')
```

## Authentication & Authorization

### JetStream Integration

- **Authentication**: Laravel JetStream with Fortify
- **Two-Factor Auth**: Built-in 2FA support
- **API Tokens**: Sanctum integration
- **Profile Management**: User profile updates

### Role & Permission System

- **Package**: Spatie Laravel Permission
- **Models**: Role, Permission, User (with HasRoles trait)
- **Controllers**: UserController, RoleController, PermissionController
- **Views**: users/index.blade.php, roles/index.blade.php, permissions/index.blade.php

### User Management Features

- **CRUD Operations**: Create, read, update, delete users
- **Role Assignment**: Assign roles to users
- **Permission Management**: Direct permission assignment
- **Bulk Operations**: Multiple user management

## View Patterns

### Standard View Structure

```blade
@php
$configData = Helper::appClasses();
@endphp

@extends('layouts.layoutMaster')

@section('title', 'Page Title')

@section('content')
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="card-title mb-0 h5">Page Title</div>
        <button class="btn btn-primary" id="createNew">
            <i class="mdi mdi-plus me-1"></i>Add Item
        </button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table datatables-table">
                <!-- DataTable content -->
            </table>
        </div>
    </div>
</div>
@endsection

@section('vendor-script')
<script src="{{ asset(mix('assets/vendor/libs/datatables-bs5/datatables-bootstrap5.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/libs/datatables-select-bs5/select.bootstrap5.js')) }}"></script>
@endsection

@section('vendor-style')
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-bs5/datatables.bootstrap5.css')) }}">
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css')) }}">
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css')) }}">
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-select-bs5/select.bootstrap5.css')) }}">
@endsection

@section('page-script')
<script>
document.addEventListener("DOMContentLoaded", function () {
    // DataTable Configuration
    var dt_table = $('.datatables-table').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: "{{ route('route.name') }}",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            }
        },
        columns: [
            { data: null, orderable: false, searchable: false }, // Responsive control
            { data: null, orderable: false, searchable: false }, // Checkbox
            { data: 'id' },
            { data: 'name' },
            { data: 'created_at' },
            { data: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                className: 'control',
                orderable: false,
                searchable: false,
                responsivePriority: 2,
                targets: 0,
                render: function (data, type, full, meta) {
                    return '';
                }
            },
            {
                targets: 1,
                orderable: false,
                searchable: false,
                responsivePriority: 3,
                render: function () {
                    return '<input type="checkbox" class="dt-checkboxes form-check-input">';
                },
                checkboxes: {
                    selectAllRender: '<input type="checkbox" class="form-check-input">'
                }
            },
            {
                targets: -1,
                orderable: false,
                searchable: false,
                render: function (data, type, full, meta) {
                    return `
                        <button class="btn btn-info btn-sm editItem" data-id="${full.id}">
                            <i class="mdi mdi-pencil"></i>
                        </button>
                        <button class="btn btn-danger btn-sm deleteItem" data-id="${full.id}">
                            <i class="mdi mdi-delete"></i>
                        </button>
                    `;
                }
            }
        ],
        responsive: true,
        dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>' +
            '<"table-responsive"t>' +
            '<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
        pageLength: 10,
        lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
        order: [[2, 'asc']],
        language: {
            sLengthMenu: '_MENU_',
            search: '',
            searchPlaceholder: 'Search..'
        }
    });
});
</script>
@endsection
```

### Modal Patterns

```blade
<!-- Modal Structure -->
<div class="modal fade" id="modalId" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Modal content -->
            </div>
        </div>
    </div>
</div>
```

### Form Patterns

```blade
<form id="formId">
    @csrf
    <div class="mb-3">
        <label for="field" class="form-label">Label</label>
        <input type="text" class="form-control" id="field" name="field" required>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
```

## JavaScript Patterns

### AJAX Form Handling

```javascript
document.getElementById('formId').addEventListener('submit', function (e) {
  e.preventDefault();

  fetch(url, {
    method: 'POST',
    headers: {
      'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert(data.success);
        location.reload();
      } else {
        alert(data.error || 'An error occurred.');
      }
    });
});
```

### Modal Handling

```javascript
// Show modal
new bootstrap.Modal(document.getElementById('modalId')).show();

// Hide modal
bootstrap.Modal.getInstance(document.getElementById('modalId')).hide();
```

## Build Process

### Laravel Mix Configuration

- **Config File**: `webpack.mix.js`
- **Build Commands**: `npm run dev`, `npm run production`
- **Watch Mode**: `npm run watch`
- **Hot Reload**: `npm run hot`

### Asset Compilation

```bash
# Development
npm run dev

# Production
npm run production

# Watch for changes
npm run watch
```

### Vendor Asset Management

- **Vendor Scripts**: Compiled from `resources/assets/vendor/`
- **Application Scripts**: Compiled from `resources/js/`
- **SCSS Compilation**: Vendor and application styles
- **Font Copying**: Automatic font asset copying

## Database Structure

### User Management

- **Users Table**: Standard Laravel users with JetStream additions
- **Roles Table**: Spatie permission roles
- **Permissions Table**: Spatie permission permissions
- **Model Has Roles**: User-role relationships
- **Model Has Permissions**: User-permission relationships

### Seeders

- **PermissionSeeder**: Creates roles and permissions
- **AdminUserSeeder**: Creates admin user
- **DatabaseSeeder**: Orchestrates all seeders

## Development Guidelines

### Code Style

- **PHP**: Follow PSR-12 standards
- **Blade**: Use semantic HTML with Bootstrap classes
- **JavaScript**: Use modern ES6+ features
- **CSS**: Use Bootstrap utility classes

### Best Practices

1. **Use Bootstrap classes** for styling instead of custom CSS
2. **Follow Laravel conventions** for controllers and models
3. **Use Spatie permissions** for role-based access control
4. **Implement proper form validation** on both client and server side
5. **Use semantic HTML** for better accessibility
6. **Follow the template's modal and form patterns**

### Common Patterns

- **Cards**: Use `.card` class for content containers
- **Buttons**: Use Bootstrap button classes with Material Design Icons
- **Forms**: Use `.form-control` and `.form-label` classes
- **Tables**: Use DataTables for all main view tables with server-side processing
- **Modals**: Use Bootstrap modal structure with proper ARIA attributes

## Fresh Materio Template Patterns

### **MANDATORY: Use Fresh Materio Structure for All Views**

Every new view MUST follow the fresh Materio template patterns learned from the official documentation and the permissions model:

#### **Complete View Template (MANDATORY):**

```blade
@php
$configData = Helper::appClasses();
@endphp

@extends('layouts.layoutMaster')

@section('title', 'Page Title')

@section('content')
<!-- Flash Messages Container -->
@if(session('success'))
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        {{ session('success') }}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
@endif

@if(session('error'))
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        {{ session('error') }}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
@endif

<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="{{ route('dashboard') }}">Home</a>
        </li>
        <li class="breadcrumb-item">
            <a href="#">Section Name</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Current Page</li>
    </ol>
</nav>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="card-title mb-0 h5">Page Title</div>
        <button class="btn btn-primary" id="createNew">
            <i class="mdi mdi-plus me-1"></i>Add
        </button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table datatables-{table-name}">
                <thead>
                    <tr>
                        <th></th> <!-- Responsive control -->
                        <th></th> <!-- Checkbox -->
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Created At</th>
                        <th>Actions</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>
@endsection
```

#### **Complete Controller Template (MANDATORY):**

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\{ModelName};
use Yajra\DataTables\Facades\DataTables;
use App\Helpers\Helpers;

class {ControllerName} extends Controller
{
    public function index(Request $request)
    {
        if ($request->ajax()) {
            $data = {ModelName}::select('*');

            return DataTables::of($data)
                ->addIndexColumn()
                ->addColumn('created_at', function ($row) {
                    return Helpers::formatDateForTable($row->created_at);
                })
                ->addColumn('action', function ($row) {
                    $btn = '<button class="btn btn-icon btn-label-success btn-sm editItem" data-id="' . $row->id . '">
                            <i class="mdi mdi-pencil"></i>
                        </button>';
                    $btn .= '<button class="btn btn-icon btn-label-danger btn-sm deleteItem" data-id="' . $row->id . '">
                            <i class="mdi mdi-delete"></i>
                        </button>';
                    return $btn;
                })
                ->rawColumns(['action'])
                ->make(true);
        }

        return view('{view-name}');
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|unique:{table_name},name|max:255',
            'description' => 'nullable|string|max:500',
        ]);

        {ModelName}::create([
            'name' => $request->name,
            'description' => $request->description
        ]);

        if ($request->ajax() || $request->wantsJson()) {
            return response()->json(['success' => '{ModelName} created successfully.']);
        }

        return redirect()->route('{route-name}.index')
            ->with('success', '{ModelName} created successfully.');
    }

    public function edit($id)
    {
        $item = {ModelName}::findOrFail($id);
        return response()->json($item);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'name' => 'required|unique:{table_name},name,' . $id . '|max:255',
            'description' => 'nullable|string|max:500',
        ]);

        $item = {ModelName}::findOrFail($id);
        $item->update([
            'name' => $request->name,
            'description' => $request->description
        ]);

        if ($request->ajax() || $request->wantsJson()) {
            return response()->json(['success' => '{ModelName} updated successfully.']);
        }

        return redirect()->route('{route-name}.index')
            ->with('success', '{ModelName} updated successfully.');
    }

    public function destroy(Request $request, $id)
    {
        {ModelName}::findOrFail($id)->delete();

        if ($request->ajax() || $request->wantsJson()) {
            return response()->json(['success' => '{ModelName} deleted successfully.']);
        }

        return redirect()->route('{route-name}.index')
            ->with('success', '{ModelName} deleted successfully.');
    }
}
```

#### **Model Template Requirements:**

- ✅ **ALWAYS** use the complete view structure above
- ✅ **ALWAYS** include flash messages, breadcrumb, and card layout
- ✅ **ALWAYS** use DataTables with server-side processing
- ✅ **ALWAYS** implement AJAX CRUD operations
- ✅ **ALWAYS** include description column with truncation
- ✅ **ALWAYS** use `btn-icon` class for action buttons
- ✅ **ALWAYS** implement auto-hide alerts after 5 seconds
- ✅ **ALWAYS** use proper date formatting with Helpers
- ✅ **ALWAYS** include proper vendor scripts and styles
- ❌ **NEVER** skip any part of the template structure
- ❌ **NEVER** use different patterns for similar views
- ❌ **NEVER** forget to include breadcrumb navigation

#### **Required View Structure:**

```blade
@php
$configData = Helper::appClasses();
@endphp

@extends('layouts.layoutMaster')

@section('title', 'Page Title')

@section('content')
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="card-title mb-0 h5">Page Title</div>
        <button class="btn btn-primary" id="createNew">
            <i class="mdi mdi-plus me-1"></i>Add Item
        </button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table datatables-table">
                <!-- DataTable content -->
            </table>
        </div>
    </div>
</div>
@endsection
```

#### **Required DataTable Implementation:**

```javascript
document.addEventListener('DOMContentLoaded', function () {
  // DataTable Configuration
  var dt_table = $('.datatables-table').DataTable({
    processing: true,
    serverSide: true,
    ajax: {
      url: "{{ route('route.name') }}",
      headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      }
    },
    columns: [
      { data: null, orderable: false, searchable: false }, // Responsive control
      { data: null, orderable: false, searchable: false }, // Checkbox
      { data: 'id' },
      { data: 'name' },
      { data: 'created_at' },
      { data: 'action', orderable: false, searchable: false }
    ],
    columnDefs: [
      {
        className: 'control',
        orderable: false,
        searchable: false,
        responsivePriority: 2,
        targets: 0,
        render: function (data, type, full, meta) {
          return '';
        }
      },
      {
        targets: 1,
        orderable: false,
        searchable: false,
        responsivePriority: 3,
        render: function () {
          return '<input type="checkbox" class="dt-checkboxes form-check-input">';
        },
        checkboxes: {
          selectAllRender: '<input type="checkbox" class="form-check-input">'
        }
      },
      {
        targets: -1,
        orderable: false,
        searchable: false,
        render: function (data, type, full, meta) {
          return `
                        <button class="btn btn-info btn-sm editItem" data-id="${full.id}">
                            <i class="mdi mdi-pencil"></i>
                        </button>
                        <button class="btn btn-danger btn-sm deleteItem" data-id="${full.id}">
                            <i class="mdi mdi-delete"></i>
                        </button>
                    `;
        }
      }
    ],
    responsive: true,
    dom:
      '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>' +
      '<"table-responsive"t>' +
      '<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
    pageLength: 10,
    lengthMenu: [
      [10, 25, 50, 100],
      [10, 25, 50, 100]
    ],
    order: [[2, 'asc']],
    language: {
      sLengthMenu: '_MENU_',
      search: '',
      searchPlaceholder: 'Search..'
    }
  });
});
```

#### **Prohibited Patterns:**

- ❌ **NEVER** use `<div class="container">` wrapper around cards
- ❌ **NEVER** use complex timeout logic for DataTable initialization
- ❌ **NEVER** use manual script loading fallbacks
- ❌ **NEVER** skip the `$configData = Helper::appClasses()` pattern
- ❌ **NEVER** use complex error handling in DataTable initialization

#### **Required for All Views:**

1. **Fresh Materio structure** with proper card layout
2. **Clean DataTable implementation** without complex error handling
3. **Proper vendor script loading** in correct order
4. **Responsive design** with Bootstrap classes
5. **Server-side processing** for all DataTables
6. **Clean JavaScript** following Materio patterns
7. **Proper modal integration** for CRUD operations
8. **Bootstrap button styling** with Material Design Icons

## Session Flash Messages

### **MANDATORY: Use Session Flash Messages Instead of JavaScript Alerts**

All CRUD operations MUST use Laravel session flash messages instead of JavaScript alerts for better user experience:

#### **Controller Pattern:**

```php
public function store(Request $request)
{
    $request->validate([
        'name' => 'required|unique:permissions,name|max:255',
    ]);

    Permission::create(['name' => $request->name]);

    if ($request->ajax()) {
        return response()->json(['success' => 'Permission created successfully.']);
    }

    return redirect()->route('permissions.index')
        ->with('success', 'Permission created successfully.');
}

public function update(Request $request, $id)
{
    $request->validate([
        'name' => 'required|unique:permissions,name,' . $id . '|max:255',
    ]);

    $permission = Permission::findOrFail($id);
    $permission->update(['name' => $request->name]);

    return redirect()->route('permissions.index')
        ->with('success', 'Permission updated successfully.');
}

public function destroy($id)
{
    Permission::findOrFail($id)->delete();

    return redirect()->route('permissions.index')
        ->with('success', 'Permission deleted successfully.');
}
```

#### **View Pattern:**

```blade
@section('content')
<!-- Flash Messages Container -->
@if(session('success'))
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        {{ session('success') }}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
@endif

@if(session('error'))
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        {{ session('error') }}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
@endif

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="card-title mb-0 h5">Permission Management</div>
        <button class="btn btn-primary" id="createNew">
            <i class="mdi mdi-plus me-1"></i>Add Permission
        </button>
    </div>
    <!-- rest of content -->
</div>
@endsection
```

#### **JavaScript Pattern (for AJAX operations):**

```javascript
// For AJAX operations, show success messages dynamically
.then(response => response.json())
.then(data => {
    if (data.success) {
        // Show success message
        const successDiv = document.createElement('div');
        successDiv.className = 'alert alert-success alert-dismissible fade show';
        successDiv.innerHTML = `
            ${data.success}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.querySelector('.card').insertBefore(successDiv, document.querySelector('.card-header'));

        // Reload DataTable
        dt_table.ajax.reload();

        // Close modal if applicable
        bootstrap.Modal.getInstance(document.getElementById('modalId')).hide();
    } else {
        // Show error message in form
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger mt-2';
        errorDiv.textContent = data.error || 'An error occurred.';
        document.getElementById('formId').appendChild(errorDiv);
    }
})
.catch(error => {
    // Show error message in form
    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger mt-2';
    errorDiv.textContent = 'Error: ' + error.message;
    document.getElementById('formId').appendChild(errorDiv);
});
```

#### **Prohibited Patterns:**

- ❌ **NEVER** use `alert()` for success messages
- ❌ **NEVER** use `confirm()` for delete confirmations (use modals instead)
- ❌ **NEVER** use JavaScript-only error handling without server-side validation
- ❌ **NEVER** use redirects for AJAX requests (causes JSON parsing errors)
- ❌ **NEVER** forget to add AJAX headers to fetch requests
- ❌ **NEVER** insert alerts at the bottom of the page

## AJAX Session Message Rules

### **MANDATORY: Proper AJAX Session Message Implementation**

All AJAX CRUD operations MUST follow these patterns for proper session message display:

#### **Controller Pattern (MANDATORY):**

```php
public function store(Request $request)
{
    $request->validate([
        'name' => 'required|unique:permissions,name|max:255',
    ]);

    Permission::create(['name' => $request->name]);

    if ($request->ajax() || $request->wantsJson()) {
        return response()->json(['success' => 'Permission created successfully.']);
    }

    return redirect()->route('permissions.index')
        ->with('success', 'Permission created successfully.');
}
```

#### **JavaScript Pattern (MANDATORY):**

```javascript
fetch(url, {
  method: 'POST',
  headers: {
    'X-Requested-With': 'XMLHttpRequest',
    Accept: 'application/json'
  },
  body: formData
})
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      // Show success message at TOP of content
      const successDiv = document.createElement('div');
      successDiv.className = 'alert alert-success alert-dismissible fade show';
      successDiv.innerHTML = `
            ${data.success}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
      // Insert at the very top of the content section
      const contentSection =
        document.querySelector('section[class*="content"]') ||
        document.querySelector('.content-wrapper') ||
        document.querySelector('main');
      if (contentSection) {
        contentSection.insertBefore(successDiv, contentSection.firstChild);
      } else {
        document.querySelector('.card').insertBefore(successDiv, document.querySelector('.card-header'));
      }

      // Reload DataTable
      dt_table.ajax.reload();

      // Close modal if applicable
      bootstrap.Modal.getInstance(document.getElementById('modalId')).hide();
    } else {
      // Show error message in form
      const errorDiv = document.createElement('div');
      errorDiv.className = 'alert alert-danger mt-2';
      errorDiv.textContent = data.error || 'An error occurred.';
      document.getElementById('formId').appendChild(errorDiv);
    }
  })
  .catch(error => {
    // Show error message in form
    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger mt-2';
    errorDiv.textContent = 'Error: ' + error.message;
    document.getElementById('formId').appendChild(errorDiv);
  });
```

#### **Required AJAX Headers:**

```javascript
headers: {
    'X-Requested-With': 'XMLHttpRequest',
    'Accept': 'application/json'
}
```

#### **Required Controller Detection:**

```php
if ($request->ajax() || $request->wantsJson()) {
  return response()->json(['success' => 'Message here.']);
}
```

#### **Alert Position Rules:**

- ✅ **ALWAYS** insert success messages at the TOP of content area
- ✅ **ALWAYS** use multiple selectors for content area detection
- ✅ **ALWAYS** make alerts dismissible with close button
- ❌ **NEVER** insert alerts at the bottom of the page
- ❌ **NEVER** use simple `document.querySelector('.card')` only

#### **Error Handling Rules:**

- ✅ **ALWAYS** check `response.ok` before parsing JSON
- ✅ **ALWAYS** use `response.json()` for AJAX responses
- ✅ **ALWAYS** handle both success and error cases
- ❌ **NEVER** use `response.text()` for JSON responses
- ❌ **NEVER** skip error handling in catch blocks

## Date Formatting Rules

### **MANDATORY: Standard Date Format Implementation**

All date displays MUST follow the format: **DD-MM-YYYY HH:MM** (e.g., "25-09-2025 12:13")

#### **Controller Pattern (MANDATORY):**

```php
use App\Helpers\Helpers;

// In DataTable controller methods
return DataTables::of($data)
  ->addIndexColumn()
  ->addColumn('created_at', function ($row) {
    return Helpers::formatDateForTable($row->created_at);
  })
  ->addColumn('updated_at', function ($row) {
    return Helpers::formatDateForTable($row->updated_at);
  })
  ->rawColumns(['action'])
  ->make(true);
```

#### **Helper Method Usage:**

```php
// For general date formatting
$formattedDate = Helpers::formatDate($date);

// For DataTable display
$formattedDate = Helpers::formatDateForTable($date);
```

#### **JavaScript Pattern (for client-side formatting):**

```javascript
// Format date in JavaScript if needed
function formatDate(dateString) {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');

  return `${day}-${month}-${year} ${hours}:${minutes}`;
}
```

#### **Required Date Format:**

- **Format**: `d-m-Y H:i` (PHP) / `DD-MM-YYYY HH:MM` (Display)
- **Example**: "25-09-2025 12:13"
- **Timezone**: Use application default timezone
- **Null Handling**: Return empty string for null dates

#### **Date Format Rules:**

- ✅ **ALWAYS** use `Helpers::formatDateForTable()` for DataTable columns
- ✅ **ALWAYS** use `Helpers::formatDate()` for general date formatting
- ✅ **ALWAYS** handle null dates gracefully
- ✅ **ALWAYS** use consistent DD-MM-YYYY HH:MM format
- ❌ **NEVER** use default Laravel date formatting in DataTables
- ❌ **NEVER** display raw timestamps to users
- ❌ **NEVER** use different date formats in the same application

## Description Column Rules

### **MANDATORY: Description Column Display Implementation**

All description columns in DataTables MUST be truncated to prevent layout issues:

#### **DataTable Column Definition (MANDATORY):**

```javascript
{
    // Description column - truncate long descriptions with click to expand
    targets: 4, // Description column index
    render: function (data, type, full, meta) {
        if (data && data.length > 50) {
            return '<span class="description-cell" data-full-text="' + data + '" data-truncated="true" style="cursor: pointer;">' + data.substring(0, 50) + '...</span>';
        }
        return data || '';
    }
}
```

#### **CSS Styling (MANDATORY):**

```css
.datatables-table td:nth-child(5) {
  max-width: 200px;
  word-wrap: break-word;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.datatables-table td:nth-child(5):hover {
  white-space: normal;
  overflow: visible;
  word-wrap: break-word;
}

.description-cell {
  cursor: pointer;
  transition: all 0.3s ease;
}

.description-cell:hover {
  opacity: 0.8;
}

.description-cell.text-expanded {
  white-space: normal;
  word-wrap: break-word;
  max-width: none;
}

.description-cell.text-truncated {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
```

#### **JavaScript Click Handler (MANDATORY):**

```javascript
// Handle description cell click to expand/collapse
$(document).on('click', '.description-cell', function () {
  var $cell = $(this);
  var isTruncated = $cell.data('truncated');
  var fullText = $cell.data('full-text');

  if (isTruncated) {
    // Expand to full text
    $cell.text(fullText);
    $cell.data('truncated', false);
    $cell.removeClass('text-truncated').addClass('text-expanded');
  } else {
    // Collapse to truncated text
    $cell.text(fullText.substring(0, 50) + '...');
    $cell.data('truncated', true);
    $cell.removeClass('text-expanded').addClass('text-truncated');
  }
});
```

#### **Description Column Rules:**

- ✅ **ALWAYS** truncate descriptions longer than 50 characters
- ✅ **ALWAYS** add click functionality to expand/collapse descriptions
- ✅ **ALWAYS** set maximum width for description columns
- ✅ **ALWAYS** use ellipsis (...) for truncated text
- ✅ **ALWAYS** provide visual feedback for clickable descriptions
- ✅ **ALWAYS** use data attributes for state management
- ❌ **NEVER** allow long descriptions to break table layout
- ❌ **NEVER** display full descriptions without user interaction
- ❌ **NEVER** skip CSS styling for description columns

## Auto-Hide Alert Messages

### **MANDATORY: Auto-Hide Alert Messages After 5 Seconds**

All success and error alert messages MUST automatically hide after 5 seconds:

#### **JavaScript Pattern (MANDATORY):**

```javascript
// Auto-hide after 5 seconds
setTimeout(function () {
  if (alertDiv && alertDiv.parentNode) {
    alertDiv.remove();
  }
}, 5000);
```

#### **Auto-Hide Rules:**

- ✅ **ALWAYS** add auto-hide to all dynamically created alerts
- ✅ **ALWAYS** use 5-second timeout for auto-hide
- ✅ **ALWAYS** check if element exists before removing
- ✅ **ALWAYS** apply to both success and error messages
- ❌ **NEVER** skip auto-hide for any alert messages
- ❌ **NEVER** use different timeout durations
- ❌ **NEVER** remove alerts without checking parentNode

## Icon-Only Action Buttons

### **MANDATORY: Action Buttons Must Use btn-icon Class**

All action buttons in DataTables MUST use the `btn-icon` class for proper icon-only styling:

#### **Button Pattern (MANDATORY):**

```html
<button class="btn btn-icon btn-info btn-sm edit-btn" data-id="${full.id}">
  <i class="mdi mdi-pencil"></i>
</button>
<button class="btn btn-icon btn-danger btn-sm delete-btn" data-id="${full.id}">
  <i class="mdi mdi-delete"></i>
</button>
```

#### **Icon-Only Button Rules:**

- ✅ **ALWAYS** use `btn-icon` class for icon-only buttons
- ✅ **ALWAYS** use Material Design Icons (mdi)
- ✅ **ALWAYS** use small button size (`btn-sm`)
- ✅ **ALWAYS** use appropriate colors (info for edit, danger for delete)
- ✅ **ALWAYS** include data attributes for functionality
- ❌ **NEVER** include text labels in action buttons
- ❌ **NEVER** skip the `btn-icon` class
- ❌ **NEVER** use large buttons for table actions

## Breadcrumb Navigation

### **MANDATORY: All Views Must Include Breadcrumb Navigation**

All main views MUST include breadcrumb navigation following the Materio theme pattern:

#### **Breadcrumb Pattern (MANDATORY):**

```html
<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item">
      <a href="{{ route('dashboard') }}">Home</a>
    </li>
    <li class="breadcrumb-item">
      <a href="#">Section Name</a>
    </li>
    <li class="breadcrumb-item active" aria-current="page">Current Page</li>
  </ol>
</nav>
```

#### **Breadcrumb Rules:**

- ✅ **ALWAYS** include breadcrumb navigation in all main views
- ✅ **ALWAYS** start with "Home" linking to dashboard
- ✅ **ALWAYS** use proper ARIA attributes for accessibility
- ✅ **ALWAYS** mark current page as active
- ✅ **ALWAYS** place breadcrumb after flash messages, before card
- ❌ **NEVER** skip breadcrumb navigation
- ❌ **NEVER** use breadcrumb without proper ARIA labels
- ❌ **NEVER** place breadcrumb inside card elements

## DataTable Implementation Rules

### **MANDATORY: All Main View Tables Must Use DataTables**

Every table in main views (users, roles, permissions, etc.) MUST use DataTables with the following requirements:

#### **Required DataTable Features:**

1. **Server-side Processing**: Always use `processing: true, serverSide: true`
2. **AJAX Loading**: Load data via AJAX endpoints
3. **Responsive Design**: Include responsive column definitions
4. **Search & Filter**: Built-in search functionality
5. **Pagination**: Automatic pagination for large datasets
6. **Sorting**: Column sorting capabilities
7. **Export Buttons**: PDF, Excel, CSV export options
8. **Row Selection**: Checkbox selection for bulk operations

#### **Standard DataTable Structure:**

```blade
<!-- HTML Table Structure -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="card-title mb-0 h5">Table Title</div>
        <button class="btn btn-primary" id="createNew">
            <i class="mdi mdi-plus"></i> Add
        </button>
    </div>
    <div class="card-body">
        <table class="table datatables-{table-name}">
            <thead>
                <tr>
                    <th></th> <!-- Responsive control -->
                    <th></th> <!-- Checkbox -->
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
```

#### **Required JavaScript Implementation:**

```javascript
// DataTable Configuration
var dt_{table_name} = $('.datatables-{table-name}').DataTable({
  processing: true,
  serverSide: true,
  ajax: {
    url: baseUrl + '{endpoint}',
    headers: {
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
  },
  columns: [
    { data: '' },           // Responsive control
    { data: '' },           // Checkbox
    { data: 'id' },
    { data: 'name' },
    { data: 'email' },
    { data: 'status' },
    { data: 'action' }
  ],
  columnDefs: [
    {
      // Responsive control column
      className: 'control',
      orderable: false,
      searchable: false,
      responsivePriority: 2,
      targets: 0,
      render: function (data, type, full, meta) {
        return '';
      }
    },
    {
      // Checkbox column
      targets: 1,
      orderable: false,
      searchable: false,
      responsivePriority: 3,
      render: function () {
        return '<input type="checkbox" class="dt-checkboxes form-check-input">';
      },
      checkboxes: {
        selectAllRender: '<input type="checkbox" class="form-check-input">'
      }
    },
     {
       // Action column
       targets: -1,
       orderable: false,
       searchable: false,
       render: function (data, type, full, meta) {
         return `
           <button class="btn btn-icon btn-info btn-sm edit-btn" data-id="${full.id}">
             <i class="mdi mdi-pencil"></i>
           </button>
           <button class="btn btn-icon btn-danger btn-sm delete-btn" data-id="${full.id}">
             <i class="mdi mdi-delete"></i>
           </button>
         `;
       }
     }
  ],
  responsive: {
    details: {
      display: $.fn.dataTable.Responsive.display.modal({
        header: function (row) {
          var data = row.data();
          return 'Details for ' + data.name;
        }
      }),
      renderer: function (api, rowIdx, columns) {
        var data = $.map(columns, function (col, i) {
          return col.hidden ?
            '<tr data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' +
            '<td>' + col.title + ':' + '</td> ' +
            '<td>' + col.data + '</td>' +
            '</tr>' :
            '';
        }).join('');
        return data ? $('<table class="table"/><tbody/>').append(data) : false;
      }
    }
  },
  dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>' +
    '<"table-responsive"t>' +
    '<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
  language: {
    sLengthMenu: '_MENU_',
    search: '',
    searchPlaceholder: 'Search..'
  }
});
```

#### **Required Server-side Controller:**

```php
public function index(Request $request)
{
    if ($request->ajax()) {
        $data = Model::select('*');

        return DataTables::of($data)
            ->addIndexColumn()
            ->addColumn('action', function($row){
                $btn = '<button class="btn btn-info btn-sm edit-btn" data-id="'.$row->id.'">
                    <i class="mdi mdi-pencil"></i>
                </button>';
                $btn .= '<button class="btn btn-danger btn-sm delete-btn" data-id="'.$row->id.'">
                    <i class="mdi mdi-delete"></i>
                </button>';
                return $btn;
            })
            ->rawColumns(['action'])
            ->make(true);
    }

    return view('{view-name}');
}
```

#### **Required Dependencies:**

```blade
@section('vendor-script')
<script src="{{ asset(mix('assets/vendor/libs/datatables-bs5/datatables-bootstrap5.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.js')) }}"></script>
<script src="{{ asset(mix('assets/vendor/libs/datatables-select-bs5/select.bootstrap5.js')) }}"></script>
@endsection

@section('vendor-style')
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-bs5/datatables.bootstrap5.css')) }}">
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css')) }}">
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css')) }}">
<link rel="stylesheet" href="{{ asset(mix('assets/vendor/libs/datatables-select-bs5/select.bootstrap5.css')) }}">
@endsection
```

#### **Prohibited Patterns:**

- ❌ **NEVER** use simple HTML tables with `@foreach` loops
- ❌ **NEVER** use basic Bootstrap tables without DataTables
- ❌ **NEVER** implement client-side only data loading
- ❌ **NEVER** skip responsive design considerations

#### **Required for All Tables:**

1. **Server-side processing** for performance
2. **AJAX endpoints** for data loading
3. **Responsive design** for mobile compatibility
4. **Export functionality** for data export
5. **Search and filter** capabilities
6. **Bulk operations** with row selection
7. **Proper error handling** for AJAX requests
8. **Loading states** during data fetching

## Troubleshooting

### Common Issues

1. **Assets not loading**: Run `npm run dev` to compile assets
2. **Layout not switching**: Clear browser local storage
3. **Permissions not working**: Check Spatie permission configuration
4. **Modal not showing**: Ensure Bootstrap JavaScript is loaded

### Debug Commands

```bash
# Clear Laravel caches
php artisan cache:clear
php artisan config:clear
php artisan view:clear

# Recompile assets
npm run dev

# Run migrations and seeders
php artisan migrate:fresh --seed
```

## Template Customization

### Theme Configuration

- **Layout**: Modify `config/custom.php`
- **Colors**: Use Bootstrap CSS variables
- **Components**: Extend existing components
- **Scripts**: Add to `@yield('page-script')`
- **Styles**: Add to `@yield('page-style')`

### Adding New Pages

1. Create controller method
2. Create view file in appropriate directory
3. Add route to `web.php`
4. Add menu item to navigation
5. Follow the standard view structure pattern

This template provides a solid foundation for Laravel admin applications with modern UI components and comprehensive user management features.

## Bootstrap-First UI Standards

### **MANDATORY: Use Bootstrap Classes Only - No Custom CSS**

All UI components MUST use Bootstrap classes exclusively. Custom CSS is strictly prohibited unless absolutely necessary.

### **CRITICAL: No Custom Background CSS - Use Bootstrap Only**

**NEVER add custom background CSS**. Always use Bootstrap classes for all styling including backgrounds, colors, and visual effects.

#### **Prohibited Background Patterns:**

- ❌ **NEVER** use `style="background: transparent"`
- ❌ **NEVER** use `style="background: none"`
- ❌ **NEVER** use `style="background-color: #fff"`
- ❌ **NEVER** use custom CSS classes with background properties
- ❌ **NEVER** use inline styles for backgrounds
- ❌ **NEVER** use `bg-light` or similar Bootstrap background classes unnecessarily

#### **Required Bootstrap Background Patterns:**

```html
<!-- Use Bootstrap background classes -->
<div class="bg-primary">Primary background</div>
<div class="bg-secondary">Secondary background</div>
<div class="bg-light">Light background</div>
<div class="bg-dark">Dark background</div>
<div class="bg-white">White background</div>
<div class="bg-transparent">Transparent background</div>

<!-- For buttons, use Bootstrap button classes -->
<button class="btn btn-outline-primary">Outline button (no background)</button>
<button class="btn btn-link">Link button (no background)</button>

<!-- For dropdowns, use Bootstrap dropdown classes -->
<button class="btn btn-outline-secondary dropdown-toggle">Dropdown</button>
```

#### **Dropdown Button Standards (Bootstrap Only):**

```html
<!-- CORRECT: Use Bootstrap button classes -->
<button class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
  <i class="mdi mdi-dots-vertical"></i>
</button>

<!-- CORRECT: Use Bootstrap link button -->
<button class="btn btn-link btn-sm dropdown-toggle" data-bs-toggle="dropdown">
  <i class="mdi mdi-dots-vertical"></i>
</button>

<!-- WRONG: Never use custom background styles -->
<button class="btn btn-sm dropdown-toggle" style="background: transparent; border: none;">
  <i class="mdi mdi-dots-vertical"></i>
</button>
```

#### **Bootstrap Background Classes:**

```html
<!-- Use these Bootstrap classes for backgrounds -->
<div class="bg-primary text-white">Primary background</div>
<div class="bg-secondary text-white">Secondary background</div>
<div class="bg-success text-white">Success background</div>
<div class="bg-danger text-white">Danger background</div>
<div class="bg-warning text-dark">Warning background</div>
<div class="bg-info text-white">Info background</div>
<div class="bg-light text-dark">Light background</div>
<div class="bg-dark text-white">Dark background</div>
<div class="bg-white text-dark">White background</div>
<div class="bg-transparent">Transparent background</div>
```

#### **Button Background Standards:**

```html
<!-- Use Bootstrap button variants -->
<button class="btn btn-primary">Primary (blue background)</button>
<button class="btn btn-secondary">Secondary (gray background)</button>
<button class="btn btn-outline-primary">Outline Primary (no background)</button>
<button class="btn btn-outline-secondary">Outline Secondary (no background)</button>
<button class="btn btn-link">Link (no background)</button>
<button class="btn btn-ghost">Ghost (minimal background)</button>
```

#### **Modal and Container Backgrounds:**

```html
<!-- Use Bootstrap container classes -->
<div class="container bg-light">Light background container</div>
<div class="container-fluid bg-white">White background container</div>

<!-- Use Bootstrap card classes -->
<div class="card bg-primary text-white">Primary background card</div>
<div class="card bg-light">Light background card</div>
<div class="card">Default card (white background)</div>

<!-- Use Bootstrap modal classes -->
<div class="modal-content bg-light">Light background modal</div>
<div class="modal-content">Default modal (white background)</div>
```

#### **Enforcement Rules for Backgrounds:**

1. **Bootstrap First**: Always check if Bootstrap provides the background class needed
2. **No Inline Styles**: Never use `style="background: ..."` attributes
3. **No Custom CSS**: Never write custom CSS for backgrounds
4. **Use Utility Classes**: Use Bootstrap's background utility classes
5. **Consistent Colors**: Use Bootstrap's color system for all backgrounds
6. **Responsive Backgrounds**: Use Bootstrap's responsive background classes if needed

#### **Allowed Background Customization (Only When Necessary):**

```css
/* ONLY for functionality not available in Bootstrap */
.custom-component {
  /* Only if Bootstrap doesn't provide this specific background functionality */
  background: linear-gradient(...); /* Only for gradients not available in Bootstrap */
}

/* NEVER for simple colors - use Bootstrap classes instead */
```

#### **Background Color Hierarchy:**

1. **First Choice**: Bootstrap utility classes (`bg-primary`, `bg-light`, etc.)
2. **Second Choice**: Bootstrap component classes (`btn-outline-*`, `card`, etc.)
3. **Third Choice**: Bootstrap color system (`text-primary`, `text-muted`, etc.)
4. **Last Resort**: Custom CSS only if Bootstrap doesn't provide the functionality

#### **Prohibited Background Patterns:**

- ❌ **NEVER** use `style="background: transparent"`
- ❌ **NEVER** use `style="background: none"`
- ❌ **NEVER** use `style="background-color: #fff"`
- ❌ **NEVER** use `style="border: none"`
- ❌ **NEVER** use custom CSS classes for simple backgrounds
- ❌ **NEVER** use inline styles for visual styling
- ❌ **NEVER** use `bg-light` when `btn-outline-*` is more appropriate
- ❌ **NEVER** use custom CSS when Bootstrap provides the same functionality

#### **Bootstrap-First Approach:**

1. **Use Bootstrap Classes**: Always use Bootstrap utility classes first
2. **No Custom CSS**: Avoid writing custom CSS unless Bootstrap doesn't provide the functionality
3. **Bootstrap Components**: Use Bootstrap components (cards, modals, buttons, forms) as base
4. **Responsive Design**: Use Bootstrap's responsive classes (col-md-, d-flex, etc.)
5. **Color System**: Use Bootstrap's color system (primary, secondary, success, danger, etc.)

#### **Required Bootstrap Patterns:**

```html
<!-- Card Layout -->
<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="card-title mb-0">Title</h5>
    <button class="btn btn-primary">Action</button>
  </div>
  <div class="card-body">
    <!-- Content -->
  </div>
</div>

<!-- Form Layout -->
<form class="needs-validation" novalidate>
  <div class="mb-3">
    <label class="form-label">Label</label>
    <input type="text" class="form-control" required />
  </div>
</form>

<!-- Button Groups -->
<div class="btn-group" role="group">
  <button type="button" class="btn btn-outline-primary">Primary</button>
  <button type="button" class="btn btn-outline-secondary">Secondary</button>
</div>

<!-- Responsive Grid -->
<div class="row g-3">
  <div class="col-md-6">
    <!-- Content -->
  </div>
  <div class="col-md-6">
    <!-- Content -->
  </div>
</div>
```

#### **Bootstrap Utility Classes:**

```html
<!-- Spacing -->
<div class="mb-3 mt-2 p-3">Content</div>

<!-- Display -->
<div class="d-flex justify-content-center align-items-center">Content</div>

<!-- Colors -->
<span class="text-primary bg-light">Colored text</span>

<!-- Borders -->
<div class="border rounded p-3">Bordered content</div>

<!-- Sizing -->
<button class="btn btn-sm btn-primary">Small button</button>
```

#### **Prohibited CSS Patterns:**

- ❌ **NEVER** write custom CSS for layout
- ❌ **NEVER** use custom colors when Bootstrap provides them
- ❌ **NEVER** create custom spacing when Bootstrap utilities exist
- ❌ **NEVER** write custom responsive breakpoints
- ❌ **NEVER** create custom form styling
- ❌ **NEVER** write custom button styles

#### **Allowed Custom CSS (Only When Necessary):**

```css
/* ONLY for functionality not available in Bootstrap */
.custom-functionality {
  /* Only if Bootstrap doesn't provide this specific functionality */
}

/* DataTable custom styling (if needed) */
.datatables-table td {
  /* Only for specific DataTable requirements */
}
```

#### **Bootstrap Component Standards:**

1. **Cards**: Use `.card`, `.card-header`, `.card-body`, `.card-footer`
2. **Buttons**: Use `.btn`, `.btn-primary`, `.btn-outline-*`, `.btn-sm`
3. **Forms**: Use `.form-control`, `.form-label`, `.form-select`
4. **Modals**: Use `.modal`, `.modal-dialog`, `.modal-content`
5. **Tables**: Use `.table`, `.table-striped`, `.table-hover`
6. **Alerts**: Use `.alert`, `.alert-success`, `.alert-danger`
7. **Badges**: Use `.badge`, `.bg-primary`, `.bg-success`
8. **Spacing**: Use `.mb-*`, `.mt-*`, `.p-*`, `.m-*`

#### **Responsive Design Rules:**

```html
<!-- Mobile First -->
<div class="col-12 col-md-6 col-lg-4">
  <!-- Content -->
</div>

<!-- Flexbox -->
<div class="d-flex flex-column flex-md-row">
  <!-- Content -->
</div>

<!-- Display -->
<div class="d-none d-md-block">
  <!-- Hidden on mobile, visible on desktop -->
</div>
```

#### **Color System Rules:**

```html
<!-- Primary Colors -->
<button class="btn btn-primary">Primary</button>
<span class="text-primary">Primary text</span>
<div class="bg-primary text-white">Primary background</div>

<!-- Status Colors -->
<span class="badge bg-success">Active</span>
<span class="badge bg-danger">Inactive</span>
<span class="badge bg-warning">Pending</span>

<!-- Utility Colors -->
<div class="text-muted">Muted text</div>
<div class="bg-light">Light background</div>
```

#### **Form Styling Rules:**

```html
<!-- Form Groups -->
<div class="mb-3">
  <label class="form-label">Label</label>
  <input type="text" class="form-control" placeholder="Placeholder" />
  <div class="form-text">Help text</div>
</div>

<!-- Form Validation -->
<div class="mb-3">
  <label class="form-label">Required Field</label>
  <input type="text" class="form-control is-invalid" required />
  <div class="invalid-feedback">Error message</div>
</div>

<!-- Form Layouts -->
<div class="row g-3">
  <div class="col-md-6">
    <div class="mb-3">
      <!-- Form field -->
    </div>
  </div>
</div>
```

#### **Button Standards:**

```html
<!-- Button Sizes -->
<button class="btn btn-primary btn-sm">Small</button>
<button class="btn btn-primary">Normal</button>
<button class="btn btn-primary btn-lg">Large</button>

<!-- Button Variants -->
<button class="btn btn-primary">Primary</button>
<button class="btn btn-outline-primary">Outline</button>
<button class="btn btn-link">Link</button>

<!-- Button Groups -->
<div class="btn-group" role="group">
  <button class="btn btn-outline-primary">Left</button>
  <button class="btn btn-outline-primary">Middle</button>
  <button class="btn btn-outline-primary">Right</button>
</div>
```

#### **Modal Standards:**

```html
<div class="modal fade" id="exampleModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <!-- Content -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save</button>
      </div>
    </div>
  </div>
</div>
```

#### **Table Standards:**

```html
<div class="table-responsive">
  <table class="table table-striped table-hover">
    <thead>
      <tr>
        <th>Column 1</th>
        <th>Column 2</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Data 1</td>
        <td>Data 2</td>
      </tr>
    </tbody>
  </table>
</div>
```

#### **Alert Standards:**

```html
<!-- Success Alert -->
<div class="alert alert-success alert-dismissible fade show">
  Success message
  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>

<!-- Error Alert -->
<div class="alert alert-danger alert-dismissible fade show">
  Error message
  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
```

#### **Branch Selection Interface (Bootstrap Only):**

```html
<div class="border rounded p-3 bg-light">
  <div class="row g-3">
    <div class="col-md-5">
      <label class="form-label text-muted small">Available Branches</label>
      <select multiple class="form-select" size="6" style="height: 200px;">
        <option value="1">Branch 1 <span class="badge bg-success ms-1">Active</span></option>
      </select>
    </div>
    <div class="col-md-2 d-flex flex-column justify-content-center align-items-center gap-2">
      <button type="button" class="btn btn-outline-primary btn-sm" title="Add Selected">
        <i class="mdi mdi-arrow-right"></i>
      </button>
    </div>
    <div class="col-md-5">
      <label class="form-label text-muted small">Selected Branches</label>
      <select multiple class="form-select" size="6" style="height: 200px;"></select>
    </div>
  </div>
</div>
```

#### **Enforcement Rules:**

1. **Code Review**: All custom CSS must be justified
2. **Bootstrap First**: Always check if Bootstrap provides the functionality
3. **Utility Classes**: Use Bootstrap utilities before writing custom CSS
4. **Component Library**: Use Bootstrap components as base
5. **Responsive Design**: Use Bootstrap's responsive system
6. **Color Consistency**: Use Bootstrap's color system
7. **Spacing System**: Use Bootstrap's spacing utilities
8. **Typography**: Use Bootstrap's typography classes

#### **Prohibited Patterns:**

- ❌ **NEVER** write custom CSS for layout
- ❌ **NEVER** create custom color variables
- ❌ **NEVER** write custom responsive breakpoints
- ❌ **NEVER** create custom form styling
- ❌ **NEVER** write custom button styles
- ❌ **NEVER** create custom spacing
- ❌ **NEVER** write custom typography
- ❌ **NEVER** create custom component styles

#### **Required for All UI:**

1. **Bootstrap classes** for all styling
2. **Responsive design** using Bootstrap grid
3. **Consistent spacing** using Bootstrap utilities
4. **Color system** using Bootstrap colors
5. **Component structure** using Bootstrap components
6. **Form styling** using Bootstrap form classes
7. **Button styling** using Bootstrap button classes
8. **Layout structure** using Bootstrap grid system

## Documentation Standards

### **MANDATORY: All Documentation Must Be in Markdown Format**

All project documentation MUST be created in the `doc/` folder using markdown format:

#### **Required Documentation Structure:**

```
doc/
├── README.md                    # Project overview and quick start
├── project-setup.md            # Installation and setup guide
├── database-structure.md       # Database schema and relationships
├── authentication-system.md    # Auth system documentation
├── datatable-implementation.md # DataTable rules and patterns
├── api-documentation.md        # API endpoints and usage
├── development-guidelines.md   # Coding standards and best practices
├── deployment-guide.md         # Production deployment instructions
└── changelog.md               # Project updates and changes
```

#### **Documentation Requirements:**

1. **Markdown Format**: All docs use `.md` extension
2. **Structured Content**: Clear headings and sections
3. **Code Examples**: Practical code snippets with syntax highlighting
4. **Update Tracking**: Version control for all changes
5. **AI Integration**: Cursor rules for automatic documentation

#### **When Creating Documentation:**

- **Always create in `doc/` folder**
- **Use descriptive filenames with `.md` extension**
- **Include table of contents for long documents**
- **Add code examples with proper syntax highlighting**
- **Update changelog for significant changes**
- **Follow markdown best practices**

#### **Documentation Templates:**

````markdown
# Document Title

## Overview

Brief description of the document content.

## Table of Contents

- [Section 1](#section-1)
- [Section 2](#section-2)

## Section 1

Content with code examples:

```php
// PHP code example
class Example
{
  public function method()
  {
    return 'example';
  }
}
```
````

## Section 2

More content with examples.

---

**Last Updated**: [Date]
**Version**: [Version]

```

#### **Prohibited Documentation Patterns:**
- ❌ **NEVER** create documentation outside `doc/` folder
- ❌ **NEVER** use non-markdown formats for documentation
- ❌ **NEVER** skip documentation for new features
- ❌ **NEVER** forget to update changelog

#### **Required for All Documentation:**
1. **Markdown format** with proper syntax
2. **Clear structure** with headings and sections
3. **Code examples** with syntax highlighting
4. **Version tracking** with dates and versions
5. **Update notifications** in changelog
6. **Consistent formatting** across all documents
7. **Table of contents** for long documents
8. **Cross-references** between related documents
```
